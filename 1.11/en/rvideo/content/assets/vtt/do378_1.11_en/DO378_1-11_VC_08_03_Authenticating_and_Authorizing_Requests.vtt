WEBVTT

00:00:00.000 --> 00:00:03.405
In this section, we are going to have
a look at how to authenticate and

00:00:03.405 --> 00:00:07.290
authorize requests to our
Quarkus microservices.

00:00:07.290 --> 00:00:13.320
Of course, authentication and authorization
are two sides of the same coin.

00:00:13.320 --> 00:00:18.840
In authentication, we establish trust
into with regard to identity of

00:00:18.840 --> 00:00:21.750
the subject we are engaged in

00:00:21.750 --> 00:00:24.900
conversation with and
then in authorization

00:00:24.900 --> 00:00:26.190
we take that further.

00:00:26.190 --> 00:00:32.955
And once we have established that the
identity is what it claims to be,

00:00:32.955 --> 00:00:35.700
we make sure that the client
is actually authorized,

00:00:35.700 --> 00:00:39.315
so permitted to perform the operations
that are trying to perform.

00:00:39.315 --> 00:00:41.840
In this setting, then authentication is

00:00:41.840 --> 00:00:44.855
obviously a prerequisite
for authorization.

00:00:44.855 --> 00:00:48.620
Now, in a monolithic application,

00:00:48.620 --> 00:00:53.599
authorization and authentication are
typically concerned with securing

00:00:53.599 --> 00:00:59.000
user facing APIs in a
microservices based application.

00:00:59.000 --> 00:01:02.975
Such concerns effect actually
every part of the system,

00:01:02.975 --> 00:01:08.750
each individual microservice would need
to be an authenticating microservice

00:01:08.750 --> 00:01:12.620
and of course, would have to
authorize any requests coming in.

00:01:12.620 --> 00:01:17.765
OpenID Connect is an authentication
and authorization layer

00:01:17.765 --> 00:01:22.595
that is added to the OAuth
version 2.0 protocol.

00:01:22.595 --> 00:01:25.520
And it actually makes it quite easy

00:01:25.520 --> 00:01:29.150
to perform authorization
and authentication as well

00:01:29.150 --> 00:01:32.130
in web services.

00:01:32.980 --> 00:01:43.535
The protocols basically create a
token, an authenticating token

00:01:43.535 --> 00:01:47.195
whenever a user authenticates against

00:01:47.195 --> 00:01:53.135
the OIDC server, any OpenID
Connect combined server can do that.

00:01:53.135 --> 00:01:57.575
And the user then includes the
token in any subsequent request

00:01:57.575 --> 00:02:02.465
for service aimed at
obviously our microservices.

00:02:02.465 --> 00:02:05.660
So essentially the workflow is like this.

00:02:05.660 --> 00:02:13.025
The client, which will eventually
require access to our Quarkus service,

00:02:13.025 --> 00:02:19.370
logs into the OpenID Connect Server
and obtains an authenticating token,

00:02:19.370 --> 00:02:21.965
a JSON web token as it's also called.

00:02:21.965 --> 00:02:25.670
And then when it requests service
from a Quarkus application,

00:02:25.670 --> 00:02:29.390
it includes the token with
the request as a header.

00:02:29.390 --> 00:02:35.300
The Quarkus service can then either 
contact the OpenID Connect Server and

00:02:35.300 --> 00:02:37.790
authenticate the token as being

00:02:37.790 --> 00:02:41.285
something that actually was
issued by the OIDC server.

00:02:41.285 --> 00:02:44.750
The OpenID Connect server
then returns a response,

00:02:44.750 --> 00:02:48.185
validating the token and gives

00:02:48.185 --> 00:02:51.920
the roles that the user belongs
to the Quarkus server,

00:02:51.920 --> 00:02:55.865
which in turn then takes care
of the authorization as well.

00:02:55.865 --> 00:02:58.115
If the request is authorized,

00:02:58.115 --> 00:03:01.685
then the Quarkus application
returns a response.

00:03:01.685 --> 00:03:04.910
You can easily add OpenID
Connect capabilities to

00:03:04.910 --> 00:03:08.180
your Quarkus applications
by simply adding

00:03:08.180 --> 00:03:15.485
an extension called OIDC or manually
adding it to pom.xml file, whichever one.

00:03:15.485 --> 00:03:18.230
And then configure the
application.properties

00:03:18.230 --> 00:03:23.480
file with a number of
OpenID Connect properties.

00:03:23.480 --> 00:03:26.585
Now, you need to have

00:03:26.585 --> 00:03:30.500
an OpenID Connect compliant
server in your infrastructure.

00:03:30.500 --> 00:03:34.370
You need to have configured
that server prior to that

00:03:34.370 --> 00:03:38.765
with a client, authenticating client,

00:03:38.765 --> 00:03:40.969
which represents your Quarkus application.

00:03:40.969 --> 00:03:45.185
You will have been given a
name for that client and

00:03:45.185 --> 00:03:49.670
a secret for that client to
introduce to the OIDC service.

00:03:49.670 --> 00:03:53.660
So these two bits of information
will be generated in

00:03:53.660 --> 00:03:59.000
the OpenID Connect Server
and will be configured for

00:03:59.000 --> 00:04:03.440
your Quarkus application using quarkus.oidc.client-

00:04:03.440 --> 00:04:09.095
id and quarkus.oidc.credentials.secret attributes.

00:04:09.095 --> 00:04:11.840
The third thing you need to
tell your Quarkus application

00:04:11.840 --> 00:04:14.570
is how to contact the OIDC server,

00:04:14.570 --> 00:04:17.150
which is a property called quarkus.

00:04:17.150 --> 00:04:20.300
oidc.auth-server-url.

00:04:20.300 --> 00:04:26.390
This URL will contain a specific word,

00:04:26.390 --> 00:04:29.750
the first part is probably going to
look very much similar of course,

00:04:29.750 --> 00:04:34.085
except the host name and the port /auth/realms/

00:04:34.085 --> 00:04:37.205
and then the realm is basically

00:04:37.205 --> 00:04:40.700
a group of authentication settings
that is common to a group

00:04:40.700 --> 00:04:42.740
of applications that use

00:04:42.740 --> 00:04:47.120
the authentication services and an OIDC
server can have any number of realm,

00:04:47.120 --> 00:04:51.170
so these 3 would actually
be the important bits of

00:04:51.170 --> 00:04:55.880
information that you will have
to provide to your application.

00:04:55.880 --> 00:05:00.575
The server URL, including
the REALM_NAME, the client,

00:05:00.575 --> 00:05:04.400
the CLIENT_NAME that your application
will use to present itself to

00:05:04.400 --> 00:05:09.244
the OIDC server and the CLIENT_SECRET
that it will use to authenticate.

00:05:09.244 --> 00:05:16.895
Once you have configured the application.properties file correctly,

00:05:16.895 --> 00:05:22.685
you can obtain the Json Web Token in question

00:05:22.685 --> 00:05:26.465
whenever you have got 
a request coming in

00:05:26.465 --> 00:05:30.860
by injecting JsonWebToken
resource in your code.

00:05:30.860 --> 00:05:36.050
Or even you can actually inject

00:05:36.050 --> 00:05:45.095
a SecurityContext into your methods
by providing a context annotation,

00:05:45.095 --> 00:05:50.675
which will give you an instance of
javax .ws.rs.core.

00:05:50.675 --> 00:05:55.595
SecurityContext class in your method
whenever you need to work with it.

00:05:55.595 --> 00:06:01.265
Other than OIDC, Quarkus can use a
number of authentication providers,

00:06:01.265 --> 00:06:05.480
uses authentication extensions for that.

00:06:05.480 --> 00:06:11.765
And there are identity
providers such as, for example,

00:06:11.765 --> 00:06:14.960
JDBC identity provider, which is

00:06:14.960 --> 00:06:19.010
enabled by quarkus-elytron-security-jdbc extension.

00:06:19.010 --> 00:06:25.055
There is a quarkus-security -jpa
extension which uses JPA entities to

00:06:25.055 --> 00:06:30.650
validate authenticity of your
clients from a data source.

00:06:30.650 --> 00:06:34.580
There's an ldap extension
quarkus-elytron-security-

00:06:34.580 --> 00:06:37.940
ldap which can authenticate
against an LDAP server.

00:06:37.940 --> 00:06:43.009
And ultimately there is a security-properties-file extension,

00:06:43.009 --> 00:06:47.435
which simply loads usernames and
passwords from a static file.

00:06:47.435 --> 00:06:51.755
So these are identity providers that can

00:06:51.755 --> 00:06:57.750
validate the identity that is
associated with a request.

00:06:58.210 --> 00:07:05.270
And then we have an HTTPAuthenticationMechanism which is responsible

00:07:05.270 --> 00:07:08.390
for extracting the
authentication credentials

00:07:08.390 --> 00:07:12.560
from the requests and
ensuring that they are valid.

00:07:12.560 --> 00:07:15.440
Sometimes authentication 
mechanisms may

00:07:15.440 --> 00:07:18.799
delegate that process
to another extension

00:07:18.799 --> 00:07:22.519
but essentially, we do have two basic,

00:07:22.519 --> 00:07:25.760
two fundamental authentication mechanisms.

00:07:25.760 --> 00:07:30.125
The basic authentication and
the form based authentication.

00:07:30.125 --> 00:07:38.480
The enablement of those is possible
through quarkus.http.

00:07:38.480 --> 00:07:46.130
.auth.basic or
quarkus.http.auth.form.enabled entries.

00:07:46.130 --> 00:07:47.615
If you set those true,

00:07:47.615 --> 00:07:51.725
then those two identity providers will be,

00:07:51.725 --> 00:07:56.100
those two authentication
methods will be available.

00:07:56.110 --> 00:08:01.805
Mutual TLS is one other
method of authentication.

00:08:01.805 --> 00:08:06.690
It takes the identity from the
client certificate and validates it.

00:08:07.030 --> 00:08:10.550
Some additional extensions implementing

00:08:10.550 --> 00:08:15.590
authentication mechanism then
would be quarkus-smallrye-jwt

00:08:15.590 --> 00:08:18.990
which extracts the identity
from a bearer token,

00:08:18.990 --> 00:08:22.375
Json Web Token that is
included in the request.

00:08:22.375 --> 00:08:25.180
This extension can actually validate

00:08:25.180 --> 00:08:30.460
the token cryptographically and can
provide introspection capabilities.

00:08:30.460 --> 00:08:34.000
Which means that if we configure

00:08:34.000 --> 00:08:36.820
our application with the public key

00:08:36.820 --> 00:08:39.505
of the authority that
issued the web token,

00:08:39.505 --> 00:08:43.540
we do not even have to
contact that authority to

00:08:43.540 --> 00:08:47.440
be able to validate the token and get
the roles that the user belongs to.

00:08:47.440 --> 00:08:53.170
We can actually simply decode or calculate

00:08:53.170 --> 00:08:57.940
the checksum of the 
Json Web Token

00:08:57.940 --> 00:09:01.290
and then use the public
key of the authority to

00:09:01.290 --> 00:09:05.819
actually validate cryptographic 
identity.

00:09:05.920 --> 00:09:09.980
quarkus-oidc enables

00:09:09.980 --> 00:09:12.695
the OpenID Connect authentication
workflow that we have

00:09:12.695 --> 00:09:16.175
been talking about just before.

00:09:16.175 --> 00:09:23.510
It supports the Bearer Token and
Authorization Token, authentication types.

00:09:23.510 --> 00:09:24.770
So the first one,

00:09:24.770 --> 00:09:27.379
the formal one, is used
for service applications.

00:09:27.379 --> 00:09:30.965
The latter one is used
for web application.

00:09:30.965 --> 00:09:34.070
And it does rely on quarkus-smallrye-jwt

00:09:34.070 --> 00:09:37.850
extension because identity tokens

00:09:37.850 --> 00:09:42.650
and Json Web Tokens are
very similar technologies.

00:09:42.650 --> 00:09:47.120
Then lastly, we have a
quarkus-elytron-security-oauth2

00:09:47.120 --> 00:09:52.760
extension that uses opaque bearer
tokens to validate the identity.

00:09:52.760 --> 00:09:57.080
And this extension is still
in technology preview status.

00:09:57.080 --> 00:10:03.425
So other approaches such as JWT are
recommended for the time being.

00:10:03.425 --> 00:10:07.955
If you need to implement custom
authentication mechanisms or protocols,

00:10:07.955 --> 00:10:13.700
you can use the HTTPAuthenticationMechanism
interface to implement

00:10:13.700 --> 00:10:17.135
your own protocols or workflows

00:10:17.135 --> 00:10:21.960
for which Quarkus does not
provide an existing extension.

00:10:23.080 --> 00:10:26.899
And of course, you would then configure

00:10:26.899 --> 00:10:31.460
authentication settings by using
corresponding extension properties.

00:10:31.460 --> 00:10:35.060
Commonly, those properties
would include the location of

00:10:35.060 --> 00:10:37.130
the authenticating server or

00:10:37.130 --> 00:10:40.970
the public key of the
authenticating authority and so on.

00:10:40.970 --> 00:10:42.440
Such as, for example,

00:10:42.440 --> 00:10:45.140
for quarkus-smallrye-jwt

00:10:45.140 --> 00:10:51.020
you can inform that extension
where the issuer URL is.

00:10:51.020 --> 00:10:53.030
So the Json web token issuer

00:10:53.030 --> 00:10:56.720
and you can also tell
it as I just mentioned,

00:10:56.720 --> 00:11:01.550
what or how to load the public
key of the issuer in order

00:11:01.550 --> 00:11:06.720
to be able to decrypt and
verify Json Web Tokens.

00:11:07.470 --> 00:11:11.290
When it comes to authentication,

00:11:11.290 --> 00:11:12.640
we have a number of options,

00:11:12.640 --> 00:11:14.620
as we have already discussed just now.

00:11:14.620 --> 00:11:20.155
Now, once you have established the
identity of the caller or of the client,

00:11:20.155 --> 00:11:24.415
we need to be able to authorize
the request that they are making.

00:11:24.415 --> 00:11:29.950
Usually a part of the authentication
process will also be the obtaining of

00:11:29.950 --> 00:11:32.335
the roles that are associated with

00:11:32.335 --> 00:11:36.880
the subject that is invoking
a particular operation.

00:11:36.880 --> 00:11:41.875
Now, that means we can

00:11:41.875 --> 00:11:47.230
then control access to a method
using Role-Based Access Control.

00:11:47.230 --> 00:11:53.630
Security. There is actually a
number of Quarkus specific but also

00:11:53.630 --> 00:11:56.750
Java standard annotations that we can use

00:11:56.750 --> 00:12:00.140
on our business methods
and our REST methods.

00:12:00.140 --> 00:12:06.845
You can see in the following code
example if we want to allow, let's say,

00:12:06.845 --> 00:12:09.815
the getAuthenticated method,

00:12:09.815 --> 00:12:16.610
which is available by using GET
request @Path /authenticated,

00:12:16.610 --> 00:12:21.230
if you want this method to not be
available to unauthenticated users,

00:12:21.230 --> 00:12:24.019
but only those that have
actually authenticated,

00:12:24.019 --> 00:12:28.940
we simply use the @Authenticated
annotation on the method and that's it.

00:12:28.940 --> 00:12:34.140
Everything else is taken
care of by Quarkus.

00:12:34.270 --> 00:12:42.110
Similarly, if there is a secured endpoint
which responds to GET requests that

00:12:42.110 --> 00:12:45.530
the path of slash secured and it
should be available to admins

00:12:45.530 --> 00:12:49.595
only, we can simply say
which roles are allowed.

00:12:49.595 --> 00:12:51.935
If there are multiple roles allowed,

00:12:51.935 --> 00:12:57.440
this annotation can
also accept an array of roles.

00:12:57.440 --> 00:13:01.910
And then if you want to
permit a method to anybody,

00:13:01.910 --> 00:13:04.865
you simply use @PermitAll annotation.

00:13:04.865 --> 00:13:07.895
If a method should only
be used by internal code,

00:13:07.895 --> 00:13:09.920
then there's also denial,

00:13:09.920 --> 00:13:14.780
which will obviously deny any and
all requests to particular method.

00:13:14.780 --> 00:13:18.560
This is how you can configure
authorization using annotations,

00:13:18.560 --> 00:13:22.355
which does require changes to
the source code and recompiling.

00:13:22.355 --> 00:13:26.705
You can however, also do that in
the application.properties file.

00:13:26.705 --> 00:13:31.670
So you need only to specify specific or

00:13:31.670 --> 00:13:37.400
define a specific policy using
quarkus.http.auth.policy

00:13:37.400 --> 00:13:44.270
with the policy name and specify which
roles are allowed for that policy.

00:13:44.270 --> 00:13:46.610
There are 2 built-in policies,

00:13:46.610 --> 00:13:47.690
one is called permit,

00:13:47.690 --> 00:13:49.310
the other one is called deny.

00:13:49.310 --> 00:13:53.405
But you can also define
as many roles, as

00:13:53.405 --> 00:13:56.660
as many policies as you need to and use

00:13:56.660 --> 00:14:01.370
any arbitrary combination of roles
that should be affected by the policy.

00:14:01.370 --> 00:14:04.835
And then you simply specify which paths

00:14:04.835 --> 00:14:10.325
and which request methods
should be using what policy.

00:14:10.325 --> 00:14:12.935
So for the secured endpoint,

00:14:12.935 --> 00:14:17.600
GET and POST require roles that
are mentioned in policy number 1.

00:14:17.600 --> 00:14:21.920
For any request to public
endpoint, everything is permitted

00:14:21.920 --> 00:14:25.730
and remember, permit is a
built-in policy. Of course,

00:14:25.730 --> 00:14:28.190
the benefits of defining these in

00:14:28.190 --> 00:14:31.760
the application.properties file is
that you can change those settings

00:14:31.760 --> 00:14:35.375
at runtime and you can enable or disable

00:14:35.375 --> 00:14:40.055
any one specific property without
recompiling the source code.

00:14:40.055 --> 00:14:42.650
There may be extensions that are

00:14:42.650 --> 00:14:45.110
enabled and loaded in
your Quarkus applications

00:14:45.110 --> 00:14:48.170
that could have other properties that

00:14:48.170 --> 00:14:51.440
control authentication and authorization,

00:14:51.440 --> 00:14:54.950
such as, for example,
quarkus.security.

00:14:54.950 --> 00:14:59.270
jaxrs.deny-unannotated-endpoints.

00:14:59.270 --> 00:15:02.645
If this property is set to true,

00:15:02.645 --> 00:15:07.130
then any endpoint in a RESTful 
web client

00:15:07.130 --> 00:15:11.495
web service, sorry, any endpoint in
a RESTful web service that is not

00:15:11.495 --> 00:15:16.860
annotated with security
constraints will be denied.

00:15:17.530 --> 00:15:20.960
In addition to annotating
individual methods,

00:15:20.960 --> 00:15:25.040
you can also annotate the entire
web service class and in that case,

00:15:25.040 --> 00:15:29.600
the security annotation that you provide
on top of the class will apply to

00:15:29.600 --> 00:15:35.285
all methods that exist in
that particular class,

00:15:35.285 --> 00:15:38.900
unless those methods have their
own security annotations.

00:15:38.900 --> 00:15:45.800
And in that case, more specific
annotations override less specific ones.

00:15:45.800 --> 00:15:52.505
It is possible to delegate authorization
to an authorization server.

00:15:52.505 --> 00:15:57.230
For example, Single Sign On, Red Hat Single Sign On is a service that

00:15:57.230 --> 00:16:01.535
enables you to associate users
and groups with resources.

00:16:01.535 --> 00:16:05.045
And then authorization
checks can be performed

00:16:05.045 --> 00:16:09.065
by the Red Hat SSO server instead
of the application itself.

00:16:09.065 --> 00:16:13.685
In this case, the workflow is very similar
to an authenticating only workflow.

00:16:13.685 --> 00:16:16.640
So the client would first have to

00:16:16.640 --> 00:16:21.590
authenticate against the OpenID
Connect server or some other OIDC

00:16:21.590 --> 00:16:25.760
capable server in order to
obtain a Json Web Token. When

00:16:25.760 --> 00:16:30.140
it contacts the Quarkus application
which is configured to use or OIDC,

00:16:30.140 --> 00:16:32.750
that's the usual, we
authenticate the token,

00:16:32.750 --> 00:16:36.260
we receive the validation and the
roles that the user is a member of.

00:16:36.260 --> 00:16:38.060
And then in the next step,

00:16:38.060 --> 00:16:41.570
we do not have a built-in
policy for authorization.

00:16:41.570 --> 00:16:44.420
We simply refer the authorization request,

00:16:44.420 --> 00:16:46.445
including the resourceid of

00:16:46.445 --> 00:16:52.100
the resource that the client is trying
to access to the authorization server,

00:16:52.100 --> 00:16:55.010
which then responds with a yes or no.

00:16:55.010 --> 00:16:57.875
If the response is allowed, obviously,

00:16:57.875 --> 00:17:02.765
then the request is processed
and returned to the user.

00:17:02.765 --> 00:17:06.740
This does simplify application
configuration immensely because it allows

00:17:06.740 --> 00:17:10.685
us to keep a central database
of authorization rules.

00:17:10.685 --> 00:17:13.625
However, it does create a tight coupling

00:17:13.625 --> 00:17:17.000
between a microservice and
an authorization server.

00:17:17.000 --> 00:17:20.030
So in many cases just simply resorting to

00:17:20.030 --> 00:17:24.140
Json Web Token authorization
with embedded roles

00:17:24.140 --> 00:17:29.100
and what we call claims
is the preferred option.

00:17:29.230 --> 00:17:34.580
The quarkus-keycloak-authorization extension,

00:17:34.580 --> 00:17:39.155
which is building on top
of quarkus-oidc, however,

00:17:39.155 --> 00:17:45.770
does allow delegating resource permission
checks to an OIDC server, just

00:17:45.770 --> 00:17:52.325
in case you intend on building one
application that uses that approach, right!

00:17:52.325 --> 00:17:55.370
Let's have a look at how
this works in practice.

00:17:55.370 --> 00:17:57.125
Join us in the next video,

00:17:57.125 --> 00:17:59.369
which is the exercise.

