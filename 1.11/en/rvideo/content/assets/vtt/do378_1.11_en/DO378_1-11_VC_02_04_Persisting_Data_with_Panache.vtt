WEBVTT

00:00:00.000 --> 00:00:01.065
Welcome back!

00:00:01.065 --> 00:00:04.620
Another common operation that is typically

00:00:04.620 --> 00:00:08.130
performed by web services is
obviously, on the one hand,

00:00:08.130 --> 00:00:13.170
they receive data from clients
that either web applications

00:00:13.170 --> 00:00:18.480
or other microservices or live users
that want to manipulate some data.

00:00:18.480 --> 00:00:20.970
And now that data needs
to be stored somewhere

00:00:20.970 --> 00:00:25.124
and for that purpose we have
the so called ORM frameworks,

00:00:25.124 --> 00:00:28.140
Object-Relational Mapping frameworks.

00:00:28.140 --> 00:00:33.824
In Java, they commonly implement
JPA Java Persistence Architecture.

00:00:33.824 --> 00:00:37.680
One of the, by far most popular
ones is called Hibernate.

00:00:37.680 --> 00:00:44.675
However, in Quarkus, we use
slight modification of that.

00:00:44.675 --> 00:00:47.570
Again, all in the,

00:00:47.570 --> 00:00:51.050
pursue of the goal
of being able to identify

00:00:51.050 --> 00:00:55.325
all the dependencies at compile
time and build a really tight,

00:00:55.325 --> 00:00:58.430
small executable Java archive.

00:00:58.430 --> 00:01:02.090
So the, the implementation is

00:01:02.090 --> 00:01:10.470
Hibernate ORM with a complimentary
JPA layer call Panache.

00:01:11.080 --> 00:01:14.360
Persistence is also
something that is covered in

00:01:14.360 --> 00:01:17.420
much more detail in the AD183 course.

00:01:17.420 --> 00:01:19.130
So if you want to refresh on it,

00:01:19.130 --> 00:01:24.525
feel free to have a look at
that chapter in the AD183.

00:01:24.525 --> 00:01:27.535
As far as Quarkus
applications are concerned,

00:01:27.535 --> 00:01:32.635
we need to configure our project
with the required dependencies.

00:01:32.635 --> 00:01:40.135
The Hibernate ORM dependency
is from the io.quarkus group

00:01:40.135 --> 00:01:45.205
and it's called quarkus-hibernate-orm, logical enough.

00:01:45.205 --> 00:01:51.760
Or what we can also do is io.quarkus

00:01:51.760 --> 00:01:56.844
quarkus-hibernate-orm-panache
to get the panache extension,

00:01:56.844 --> 00:02:01.550
in addition to the bare Hibernate ORM.

00:02:02.340 --> 00:02:06.570
The underlying Hibernate ORM

00:02:06.570 --> 00:02:10.910
dependency is transitive
dependency of the Panache one

00:02:10.910 --> 00:02:12.875
so you do not have to include both.

00:02:12.875 --> 00:02:14.930
If you just include the Panache one,

00:02:14.930 --> 00:02:18.350
the Hibernate ORM dependency
will automatically be added.

00:02:18.350 --> 00:02:22.400
However, now, whichever
database you intend to use,

00:02:22.400 --> 00:02:29.405
you also must bundle your database
drivers with your Quarkus application.

00:02:29.405 --> 00:02:33.830
So for the most commonly
used open source databases,

00:02:33.830 --> 00:02:36.320
we have dependencies that are,

00:02:36.320 --> 00:02:40.175
again, reengineered, refactor for Quarkus

00:02:40.175 --> 00:02:44.315
already present in the io.quarkus group.

00:02:44.315 --> 00:02:45.890
For Postgres, for example,

00:02:45.890 --> 00:02:49.740
it's called quarkus-jdbc-postgresql.

00:02:50.280 --> 00:02:56.995
As we said, to make it easier to
configure Quarkus applications,

00:02:56.995 --> 00:03:00.970
all the properties,
including the persistence

00:03:00.970 --> 00:03:06.625
related ones are actually placed into
the application.properties file.

00:03:06.625 --> 00:03:10.090
Therefore, you do not need
a persistence.xml file.

00:03:10.090 --> 00:03:12.380
It is completely optional.

00:03:12.570 --> 00:03:16.210
What you would put into
application properties file though

00:03:16.210 --> 00:03:18.955
is the quarkus.datasource.

00:03:18.955 --> 00:03:22.810
db-kind attribute or property which

00:03:22.810 --> 00:03:27.415
points to the type of the database
driver that you bundled with it.

00:03:27.415 --> 00:03:31.420
Then you will add the
authentication related parameters,

00:03:31.420 --> 00:03:33.195
such as username and password,

00:03:33.195 --> 00:03:39.395
and the datasources, jdbc.url
which is vendor-specific.

00:03:39.395 --> 00:03:42.290
So for PostgreSQL, that
would be jdbc:

00:03:42.290 --> 00:03:44.690
postgresql://

00:03:44.690 --> 00:03:47.824
hostname port and the
name of the database.

00:03:47.824 --> 00:03:51.845
When you're implementing
persistence in your Java code,

00:03:51.845 --> 00:03:58.010
you simply need to inject the
EntityManager and then use

00:03:58.010 --> 00:04:03.905
it to invoke the persists and find
and update and similar methods.

00:04:03.905 --> 00:04:08.390
So the work with the EntityManager
approach is in no way

00:04:08.390 --> 00:04:10.940
different from the one that

00:04:10.940 --> 00:04:13.835
you would typically use in
another Java application.

00:04:13.835 --> 00:04:18.230
However, the drawback is that
EntityManager is not type safe.

00:04:18.230 --> 00:04:22.100
So you will get some warnings when
trying to compile your application.

00:04:22.100 --> 00:04:24.800
Of course, warnings have a purpose.

00:04:24.800 --> 00:04:26.600
They pointed out that it's easy to make

00:04:26.600 --> 00:04:31.430
mistakes in the persistence code
that could break the application.

00:04:31.430 --> 00:04:39.410
So it's, why we mentioned
Panache in the first place.

00:04:39.410 --> 00:04:46.385
With Panache, it's actually really
easy to create persistent objects.

00:04:46.385 --> 00:04:47.750
Or you can use Panache in

00:04:47.750 --> 00:04:51.410
2 different ways, 2 different
data access patterns.

00:04:51.410 --> 00:04:56.015
The first one is a traditional approach
called the Repository Pattern.

00:04:56.015 --> 00:05:03.515
It is the way that Java object access has been implemented traditionally

00:05:03.515 --> 00:05:09.470
in an attempt to separate the logic
of retrieval and storage of the data

00:05:09.470 --> 00:05:14.420
and it's mapping to entities.
To use the Repository Pattern,

00:05:14.420 --> 00:05:17.390
you simply create a repository class that

00:05:17.390 --> 00:05:20.884
extends from a base class
called PanacheRepository.

00:05:20.884 --> 00:05:24.170
It is a typed class, thanks to genetics.

00:05:24.170 --> 00:05:25.445
so it does provide us

00:05:25.445 --> 00:05:31.069
the type safety we need. Make it
an @ApplicationScoped repository

00:05:31.069 --> 00:05:36.650
because there's only the need to have
one throughout the application.

00:05:36.650 --> 00:05:40.160
And then you simply inject that
repository wherever you need it,

00:05:40.160 --> 00:05:42.800
wherever you need access to the data.

00:05:42.800 --> 00:05:46.475
Now given an @Entity that looks like this

00:05:46.475 --> 00:05:48.815
for example, an Expense,

00:05:48.815 --> 00:05:54.050
we would in our service code
create an Expense, initialize it,

00:05:54.050 --> 00:05:56.615
and then use the expenseRepository,

00:05:56.615 --> 00:05:59.900
with the persist method, and
the parameter of expense.

00:05:59.900 --> 00:06:01.910
So it basically is

00:06:01.910 --> 00:06:06.784
a very similar approach to using EntityManager
except that it is type-safe.

00:06:06.784 --> 00:06:09.260
This is something that
you would do if you want

00:06:09.260 --> 00:06:13.820
your business logic to be
agnostic of your data sources.

00:06:13.820 --> 00:06:16.325
However, there's much easier approach,

00:06:16.325 --> 00:06:19.295
which is called the Active Record pattern.

00:06:19.295 --> 00:06:26.030
The Active Record pattern actually
allows you to basically add,

00:06:26.030 --> 00:06:30.935
enrich your entity model
with the persistence code.

00:06:30.935 --> 00:06:33.320
So instead of implementing

00:06:33.320 --> 00:06:38.930
a bear expense class with only the
attributes that it has to contain,

00:06:38.930 --> 00:06:41.764
you extend the PanacheEntity

00:06:41.764 --> 00:06:48.335
and this gives you immediate access
to methods such as persist,

00:06:48.335 --> 00:06:53.150
search, and so on that are
in the entity class now.

00:06:53.150 --> 00:06:55.970
So there's no need to inject
anything in your code.

00:06:55.970 --> 00:06:59.360
You simply create a new
Expense, initialize it,

00:06:59.360 --> 00:07:01.475
and then call persist on it,

00:07:01.475 --> 00:07:03.229
and it will persist it,

00:07:03.229 --> 00:07:05.914
Looking at the entity class again,

00:07:05.914 --> 00:07:13.265
note that the properties are all marked
as public with the access restriction.

00:07:13.265 --> 00:07:21.755
So this is because it helps us avoid
the reflection API during compilation

00:07:21.755 --> 00:07:26.360
and of course, during compilation,

00:07:26.360 --> 00:07:28.655
if you mark these fields as public,

00:07:28.655 --> 00:07:34.640
Quarkus will change them and generate their
getters and setters automatically.

00:07:34.640 --> 00:07:36.830
Of course, whatever your approach is,

00:07:36.830 --> 00:07:39.320
you could always have
public getters and setters

00:07:39.320 --> 00:07:44.360
and at these package protected
package visibility,

00:07:44.360 --> 00:07:48.605
so package private visibility
of your class fields.

00:07:48.605 --> 00:07:53.675
as we said, in the interest of making it
easier to perform native compilation.

00:07:53.675 --> 00:07:56.510
When you're using the
Active Record button,

00:07:56.510 --> 00:07:58.880
you can add custom methods to

00:07:58.880 --> 00:08:04.040
the entity class to make them available
to all the instances.

00:08:04.040 --> 00:08:07.760
Like for example, you can

00:08:07.760 --> 00:08:14.240
create service method that returns
a list of expenses that were

00:08:14.240 --> 00:08:18.830
created today simply by
adding a method that invokes

00:08:18.830 --> 00:08:21.590
the inherited list method searches by

00:08:21.590 --> 00:08:26.450
creation date and uses the
parameter of LocalDatetime.now

00:08:26.450 --> 00:08:29.285
and that will return a list of expenses.

00:08:29.285 --> 00:08:31.130
And if you make it a static method,

00:08:31.130 --> 00:08:37.550
it's really easy to invoke it by
a static accessor like this

00:08:37.550 --> 00:08:39.095
for example.

00:08:39.095 --> 00:08:43.460
Whenever you're working with
a new instance of an object,

00:08:43.460 --> 00:08:47.285
you can store it into the database
using the top persist method.

00:08:47.285 --> 00:08:52.190
You can check whether it is
persisted, using isPersistent.

00:08:52.190 --> 00:08:55.040
Invocation, you can get
all the instances of

00:08:55.040 --> 00:08:58.550
a particular entity from
the database using listAll.

00:08:58.550 --> 00:09:01.760
You can find them by IDs

00:09:01.760 --> 00:09:08.525
and you can also use the optional
approach to find entities.

00:09:08.525 --> 00:09:13.490
You can then also find all alive

00:09:13.490 --> 00:09:19.940
instances of an entity using list
alive with the true parameter.

00:09:19.940 --> 00:09:21.515
You can count them.

00:09:21.515 --> 00:09:24.575
You can count them using a filter.

00:09:24.575 --> 00:09:26.930
You can delete them using a filter,

00:09:26.930 --> 00:09:28.505
delete all of them,

00:09:28.505 --> 00:09:31.580
and delete by a key.

00:09:31.580 --> 00:09:39.500
And you can also use JPA
queries in the update clause,

00:09:39.500 --> 00:09:41.930
for example. Let's have
a look at how to use

00:09:41.930 --> 00:09:44.600
Panache in the development of entities.

00:09:44.600 --> 00:09:46.830
Join us in the next video.

