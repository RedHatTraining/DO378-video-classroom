WEBVTT

00:00:00.000 --> 00:00:03.240
In this chapter, we are going to have
a look at some common tasks that

00:00:03.240 --> 00:00:07.290
we'll eventually end up doing in
practically every application.

00:00:07.290 --> 00:00:10.950
That being injecting configuration data

00:00:10.950 --> 00:00:15.480
into Quarkus class or into
a Quarkus microservice.

00:00:15.480 --> 00:00:17.820
We have an exercise for that.

00:00:17.820 --> 00:00:21.090
Then we are going to have a look
at how to use those features

00:00:21.090 --> 00:00:25.439
to implement feature
toggles in a microservice.

00:00:25.439 --> 00:00:27.990
Again, a guided exercise for that.

00:00:27.990 --> 00:00:30.690
Then lastly, we are going to
have a look at how to use

00:00:30.690 --> 00:00:34.465
service discovery to connect
multiple services together

00:00:34.465 --> 00:00:36.755
and there's an exercise for that as well.

00:00:36.755 --> 00:00:39.665
And as usual, there is an
end of chapter review lab.

00:00:39.665 --> 00:00:45.590
It's critical that applications
can be reconfigured to adapt,

00:00:45.590 --> 00:00:48.019
to behave correctly in
whatever environment

00:00:48.019 --> 00:00:52.220
they are being, either
tested in, integration

00:00:52.220 --> 00:00:54.380
tested in, bullet proofed in,

00:00:54.380 --> 00:00:59.480
performance stressed in, and ultimately
of course deployed to production

00:00:59.480 --> 00:01:02.270
and there will be different settings
in each of those environments,

00:01:02.270 --> 00:01:05.450
I'm sure. Even for example,
in performance testing,

00:01:05.450 --> 00:01:08.690
there might be some tunables that
changed several times during

00:01:08.690 --> 00:01:13.550
the performance tests,
calibration, for example.

00:01:13.550 --> 00:01:16.100
So it's important to be able to access

00:01:16.100 --> 00:01:20.480
those configurables from within
the application as well.

00:01:20.480 --> 00:01:25.685
Now there is a MicroProfile Config
specification that helps you

00:01:25.685 --> 00:01:28.414
inject or helps you source

00:01:28.414 --> 00:01:32.810
external configuration data and
bring it into your application.

00:01:32.810 --> 00:01:37.310
And the base concept

00:01:37.310 --> 00:01:41.795
for the MicroProfile Config
specification is that of a ConfigSource.

00:01:41.795 --> 00:01:46.100
There are several different ConfigSources like System Properties,

00:01:46.100 --> 00:01:49.310
Environment Variables, property files.

00:01:49.310 --> 00:01:54.530
We will have a look at exactly how they
relate to each other a little bit later.

00:01:54.530 --> 00:01:59.240
Now, the ConfigSources are loaded,

00:01:59.240 --> 00:02:01.609
overlaid according to their priority.

00:02:01.609 --> 00:02:04.910
And then the highest priority
values can be accessed

00:02:04.910 --> 00:02:08.810
using a simple annotation
called ConfigProperty.

00:02:08.810 --> 00:02:11.990
So consider the following
application properties

00:02:11.990 --> 00:02:14.300
file. There are 3 properties.

00:02:14.300 --> 00:02:16.385
One called format, the other one unit,

00:02:16.385 --> 00:02:19.655
and the third one, debug-flag.

00:02:19.655 --> 00:02:23.345
If we wanted to access those values,

00:02:23.345 --> 00:02:26.945
of course, Quarkus automatically
loads application properties

00:02:26.945 --> 00:02:29.180
when the application is started.

00:02:29.180 --> 00:02:31.160
We simply have to use

00:02:31.160 --> 00:02:36.890
the @ConfigProperty annotation on the
field that we want to inject it into and

00:02:36.890 --> 00:02:40.880
the name of the property in the
configuration file determines

00:02:40.880 --> 00:02:45.275
what value is going to be
injected into that variable.

00:02:45.275 --> 00:02:47.060
Now, if you are familiar with

00:02:47.060 --> 00:02:49.970
the MicroProfile Config
specification already,

00:02:49.970 --> 00:02:52.910
you will notice one interesting detail here.

00:02:52.910 --> 00:02:56.480
Generally, in classic Java applications,

00:02:56.480 --> 00:02:59.750
you will have to mark
this particular piece

00:02:59.750 --> 00:03:03.515
of code as an injection point
using an @Inject annotation.

00:03:03.515 --> 00:03:05.765
That's one of the many differences,

00:03:05.765 --> 00:03:09.605
tiny but interesting, perhaps

00:03:09.605 --> 00:03:14.465
differences that Quarkus has compared
to traditional environments.

00:03:14.465 --> 00:03:17.975
It does not have to be marked as
an injection point in Quarkus.

00:03:17.975 --> 00:03:20.360
It actually the sole use
of @ConfigProperty

00:03:20.360 --> 00:03:24.080
annotation marks it as
such and does the job.

00:03:24.080 --> 00:03:29.840
The second example is @ConfigProperty
name debug-flag,

00:03:29.840 --> 00:03:31.970
where we assign a defaultValue.

00:03:31.970 --> 00:03:36.245
So even if it's not present in
the application properties file,

00:03:36.245 --> 00:03:42.210
it's going to have a value and we simply
assign it to the debug-flag field.

00:03:42.550 --> 00:03:47.210
Third one, called the unit
as basically the same,

00:03:47.210 --> 00:03:50.255
but in the source code
is marked as optional.

00:03:50.255 --> 00:03:51.845
So what is the difference?

00:03:51.845 --> 00:03:54.905
The difference is that the format,

00:03:54.905 --> 00:03:58.760
if it's not present in the
application properties files,

00:03:58.760 --> 00:04:03.155
will actually cause a null point to exception

00:04:03.155 --> 00:04:08.210
in any object type other than string.

00:04:08.210 --> 00:04:10.310
Now in the string object type,

00:04:10.310 --> 00:04:13.310
it will actually be an empty string,

00:04:13.310 --> 00:04:17.270
but we can access

00:04:17.270 --> 00:04:22.220
properties in a more safe way if
we simply mark them as optional

00:04:22.220 --> 00:04:27.690
and of course specify the
the container type.

00:04:28.180 --> 00:04:36.665
You can then use that optional in wherever
you need to use it by

00:04:36.665 --> 00:04:40.595
referring to it by its field name,

00:04:40.595 --> 00:04:42.410
and then using orElse,

00:04:42.410 --> 00:04:47.390
which we will then use whatever value is
assigned to the variable, to the field,

00:04:47.390 --> 00:04:49.040
or if there is no value,

00:04:49.040 --> 00:04:51.500
use the fall backward.

00:04:51.500 --> 00:04:56.000
So it's just 1 of 2 ways
of providing default values.

00:04:56.000 --> 00:04:58.520
Either using defaultValue on

00:04:58.520 --> 00:05:01.055
the @ConfigProperty annotation or using an

00:05:01.055 --> 00:05:04.265
optional within orElse accessor.

00:05:04.265 --> 00:05:09.080
The above example could be refactored
into an even easier way of accessing

00:05:09.080 --> 00:05:14.660
properties using the @ConfigProperties
annotation note the plural here.

00:05:14.660 --> 00:05:17.630
Now this is an annotation that allows you

00:05:17.630 --> 00:05:21.650
to simply take a group of properties with

00:05:21.650 --> 00:05:24.860
a specific prefix and inject all of

00:05:24.860 --> 00:05:29.555
the fields following that
prefix into an interface.

00:05:29.555 --> 00:05:37.145
So what you do in writing the class,
mean it can be a class actually,

00:05:37.145 --> 00:05:40.400
in that case, you simply annotate it using

00:05:40.400 --> 00:05:43.250
@ConfigProperties and specifying a prefix.

00:05:43.250 --> 00:05:46.684
But actually, it could
also be an interface.

00:05:46.684 --> 00:05:52.925
So an interface does not really
need any getters and setters.

00:05:52.925 --> 00:05:55.820
We just have to specify a name for

00:05:55.820 --> 00:05:58.910
it, annotate it with a @ConfigProperties
annotation,

00:05:58.910 --> 00:06:03.440
and just declare the methods
that Quarkus should use to access

00:06:03.440 --> 00:06:05.210
those properties in it. It will generate

00:06:05.210 --> 00:06:08.735
the implementation for
this interface on the fly

00:06:08.735 --> 00:06:10.730
when we are compiling the application.

00:06:10.730 --> 00:06:12.965
Really cool, saves a lot of work.

00:06:12.965 --> 00:06:15.200
Now note that we still have to use

00:06:15.200 --> 00:06:18.140
the @ConfigProperty annotation on

00:06:18.140 --> 00:06:22.610
the DebugFlag because we
want to set a defaultValue

00:06:22.610 --> 00:06:25.205
but apart from that,

00:06:25.205 --> 00:06:29.585
ConfigProperties takes care
of all the injection

00:06:29.585 --> 00:06:31.340
into the fields of this class.

00:06:31.340 --> 00:06:38.820
Do note that in the
example over here above,

00:06:39.040 --> 00:06:43.280
debug-flag is an option

00:06:43.280 --> 00:06:48.365
that is not, an attribute that
is not a valid Java field

00:06:48.365 --> 00:06:49.085
name.

00:06:49.085 --> 00:06:54.665
Minuses are not allowed in Java
variables or Java field names

00:06:54.665 --> 00:06:58.100
and that is why actually
it gets automatically

00:06:58.100 --> 00:07:03.050
converted when we use @ConfigProperties
into the camelCase format.

00:07:03.050 --> 00:07:08.720
So the minus is actually
removed and affects

00:07:08.720 --> 00:07:14.825
the following letter in that, the following
letter is converted to uppercase. Alright!

00:07:14.825 --> 00:07:16.970
So that's how this works.

00:07:16.970 --> 00:07:22.820
We can use the generated
interface in our code or if we use

00:07:22.820 --> 00:07:25.850
a separate property class
that is annotated with

00:07:25.850 --> 00:07:30.260
the @ConfigProperties
simply by injecting it

00:07:30.260 --> 00:07:31.490
and then of course,

00:07:31.490 --> 00:07:39.410
using the getter methods for our
values in whatever way necessary.

00:07:39.410 --> 00:07:43.910
Interesting is that @ConfigProperties
does support nested objects,

00:07:43.910 --> 00:07:48.350
so if your interface is annotated
with the @ConfigProperties

00:07:48.350 --> 00:07:53.130
annotation, selecting a certain
prefix from a config file.

00:07:53.680 --> 00:07:58.700
If you have a sub
interface declared in it

00:07:58.700 --> 00:08:05.510
and one of the fields is actually a
type that matches this sub interface.

00:08:05.510 --> 00:08:07.970
You can take the fields of

00:08:07.970 --> 00:08:12.890
that sub interface as nested
properties of that field.

00:08:12.890 --> 00:08:18.230
So we've got an example user in
the attribute, would be called

00:08:18.230 --> 00:08:20.885
user because the getters
convention is obviously

00:08:20.885 --> 00:08:23.885
get, then attribute name getUser.

00:08:23.885 --> 00:08:27.815
So that's why in the properties,
the prefixes example,

00:08:27.815 --> 00:08:32.300
the section is called
user and then any field,

00:08:32.300 --> 00:08:34.519
any getter defined in the interface,

00:08:34.519 --> 00:08:37.580
the sub-interface is also converted into

00:08:37.580 --> 00:08:41.090
a property underneath a
subclass or a sub attributes.

00:08:41.090 --> 00:08:43.940
There are going to be
various different types of

00:08:43.940 --> 00:08:46.940
environments that you are going
to run your application in.

00:08:46.940 --> 00:08:48.050
Of course, first of all,

00:08:48.050 --> 00:08:51.350
locally using the dev
mode maven quarkus dev

00:08:51.350 --> 00:08:56.090
right, to perhaps test the application
quickly implement some last second

00:08:56.090 --> 00:08:58.550
code changes, reload them and so on.

00:08:58.550 --> 00:09:02.855
You're going to want to use different
settings for that type of testing,

00:09:02.855 --> 00:09:05.689
then when you, for example,

00:09:05.689 --> 00:09:10.220
build and deploy the application
in OpenShift and run it there.

00:09:10.220 --> 00:09:14.270
There's another lifecycle phase

00:09:14.270 --> 00:09:16.160
where you might want to
use different settings,

00:09:16.160 --> 00:09:18.425
which is Maven test. Alright?

00:09:18.425 --> 00:09:23.075
So these are actually the 3
different distinct

00:09:23.075 --> 00:09:26.525
configuration profiles that
have built into Quarkus.

00:09:26.525 --> 00:09:28.850
The dev one is

00:09:28.850 --> 00:09:30.890
activated automatically when you are

00:09:30.890 --> 00:09:32.960
running the application
in development mode.

00:09:32.960 --> 00:09:37.610
The test one is activated when
running the unit tests and prod,

00:09:37.610 --> 00:09:39.170
which is the default profile,

00:09:39.170 --> 00:09:43.370
is activated whenever doing
anything other than the first two.

00:09:43.370 --> 00:09:48.080
How can you use different values
in either of those profiles?

00:09:48.080 --> 00:09:51.050
Well, the prod profile is simply stating

00:09:51.050 --> 00:09:54.695
the configuration attribute
in assigning it the value.

00:09:54.695 --> 00:09:57.440
This is basically prod.

00:09:57.440 --> 00:10:03.500
Anything that you prefix
to the attribute name

00:10:03.500 --> 00:10:06.470
is then the name becomes the name of

00:10:06.470 --> 00:10:09.665
the profile you want to use
that particular value in.

00:10:09.665 --> 00:10:13.610
So for prod, we are going to
use the example.user.

00:10:13.610 --> 00:10:15.950
username or student.

00:10:15.950 --> 00:10:18.725
When running unit tests,

00:10:18.725 --> 00:10:21.965
we want to use the
username of teststudent

00:10:21.965 --> 00:10:26.585
and in dev mode when we are
running the application using

00:10:26.585 --> 00:10:31.820
maven quarkus dev we want
to use the dev profile,

00:10:31.820 --> 00:10:34.160
so we said dev.example.user.

00:10:34.160 --> 00:10:36.710
username to devstudent.

00:10:36.710 --> 00:10:39.005
Note that for example,

00:10:39.005 --> 00:10:42.590
the email is not set in the dev profile,

00:10:42.590 --> 00:10:46.865
which means that it will simply
fall back to the default one.

00:10:46.865 --> 00:10:51.125
So if any one attribute is
missing in either profile,

00:10:51.125 --> 00:10:55.955
the defaults from prod are
actually used for it.

00:10:55.955 --> 00:10:59.030
You can actually define
your custom profiles.

00:10:59.030 --> 00:11:00.155
There's no problem with that.

00:11:00.155 --> 00:11:02.870
You can simply set the
quarkus.profile

00:11:02.870 --> 00:11:07.115
attributes on the command
line and give it a name

00:11:07.115 --> 00:11:11.150
and then that corresponding section
from application properties, we will

00:11:11.150 --> 00:11:16.205
use or you can even set the
profile name on the command line,

00:11:16.205 --> 00:11:21.245
using an environment variable
called QUARKUS_PROFILE

00:11:21.245 --> 00:11:23.090
setting it to the name,

00:11:23.090 --> 00:11:25.430
the profile you want to use.

00:11:25.430 --> 00:11:27.830
Now back to ConfigSources,

00:11:27.830 --> 00:11:29.990
we have mentioned them
earlier in this section.

00:11:29.990 --> 00:11:33.425
There is a strict and
clear priority

00:11:33.425 --> 00:11:36.800
with regard to where your
values are loaded from.

00:11:36.800 --> 00:11:39.050
Let's say if you set the value both in

00:11:39.050 --> 00:11:42.530
Application Properties and
in an Environment Variable

00:11:42.530 --> 00:11:45.200
and then finally also on
the Java command line

00:11:45.200 --> 00:11:48.770
using the minus d inside
a system property,

00:11:48.770 --> 00:11:53.645
the lowest priority goes
to Application Properties.

00:11:53.645 --> 00:11:56.765
Then we have the Kubernetes Config Maps,

00:11:56.765 --> 00:12:00.545
Secrets which are managed by OpenShift

00:12:00.545 --> 00:12:06.260
and of course, the various that
quarkus.openshift attributes

00:12:06.260 --> 00:12:12.335
where you map Config Map values into
the deployment config.

00:12:12.335 --> 00:12:18.590
There is an option of loading
in an environment file,

00:12:18.590 --> 00:12:23.060
if it's present in the route
directory of your application.

00:12:23.060 --> 00:12:26.210
There is an option
obviously of setting values

00:12:26.210 --> 00:12:29.045
from Environment Variables
in the highest one

00:12:29.045 --> 00:12:31.505
setting them as Java System Properties,

00:12:31.505 --> 00:12:33.815
most commonly on the command line.

00:12:33.815 --> 00:12:37.835
Now this is lowest to highest priority,

00:12:37.835 --> 00:12:41.255
highest priority being of
course, the command line.

00:12:41.255 --> 00:12:44.270
So in addition to application.properties,

00:12:44.270 --> 00:12:47.420
we saw a couple of interesting new ones,

00:12:47.420 --> 00:12:52.220
new ways of setting values in our
configuration and environment file is

00:12:52.220 --> 00:12:55.295
actually simply a file called

00:12:55.295 --> 00:12:59.660
.env in the route directory
of the application.

00:12:59.660 --> 00:13:03.140
And the main difference is to

00:13:03.140 --> 00:13:05.840
application.properties or
just simply the syntax

00:13:05.840 --> 00:13:09.034
and the fact that it
has a higher priority.

00:13:09.034 --> 00:13:14.210
So converting application property names

00:13:14.210 --> 00:13:18.260
into environment variable
names is rather simple.

00:13:18.260 --> 00:13:24.155
In any letter that you use an application.properties has to be uppercased,

00:13:24.155 --> 00:13:27.710
any dots are converted to underscores,

00:13:27.710 --> 00:13:31.400
any dashes are converted
to underscores and

00:13:31.400 --> 00:13:34.310
any percent signs at the
beginning of the line when

00:13:34.310 --> 00:13:38.255
configuring a profile are also
converted to underscores.

00:13:38.255 --> 00:13:43.490
So essentially from whatever is a
dot hyphen or a percent sign,

00:13:43.490 --> 00:13:47.600
you just simply get a bunch of
underscores in the env file

00:13:47.600 --> 00:13:49.430
and then of course, the value of

00:13:49.430 --> 00:13:54.320
the property is literal, so
you just use the same,

00:13:54.320 --> 00:14:01.260
the same type as you would use
in application.properties.

00:14:02.550 --> 00:14:06.730
Environment variables are
set on the command line

00:14:06.730 --> 00:14:10.270
or in the environment prior
to running a maven command.

00:14:10.270 --> 00:14:13.060
So apart from being simply

00:14:13.060 --> 00:14:18.355
written prior or a head of the
command that you will be executing,

00:14:18.355 --> 00:14:26.830
they can also be set using
export in the shell

00:14:26.830 --> 00:14:28.525
and if they're present,

00:14:28.525 --> 00:14:33.130
then of course they will be used over
and above application properties,

00:14:33.130 --> 00:14:35.905
config map secrets in environment files.

00:14:35.905 --> 00:14:41.155
And ultimately the highest priority of
all goes to the Java system properties

00:14:41.155 --> 00:14:45.170
and they are simply
properties that are set on

00:14:45.170 --> 00:14:50.165
the Java Virtual Machine command line
using the minus capital D option.

00:14:50.165 --> 00:14:53.930
Not all values that you want
to assign to your attributes will

00:14:53.930 --> 00:14:57.815
be simple String or Boolean
or digit scalar values.

00:14:57.815 --> 00:15:01.640
Sometimes you'll have to deal
with data structures that are

00:15:01.640 --> 00:15:07.070
simply encoded in a longer string
using special separators or whatever.

00:15:07.070 --> 00:15:09.815
You can create your own data converters.

00:15:09.815 --> 00:15:14.390
So it's possible to implement
the Converter interface.

00:15:14.390 --> 00:15:17.945
Now, let's see an example,

00:15:17.945 --> 00:15:22.700
we have a @ConfigProperties annotated
example configuration interface,

00:15:22.700 --> 00:15:27.290
just like we've seen in the previous
parts of previous examples

00:15:27.290 --> 00:15:31.580
in this section, we have
the users of attribute,

00:15:31.580 --> 00:15:35.570
which defines 2 attributes,
username and email.

00:15:35.570 --> 00:15:40.970
Now let's say that this user
attribute is actually specified in

00:15:40.970 --> 00:15:46.490
our property file or even environment
variable wherever in a single string.

00:15:46.490 --> 00:15:49.400
So we have to be able to
split that single string and

00:15:49.400 --> 00:15:52.895
inject it into 2
properties of that class.

00:15:52.895 --> 00:15:59.870
Here's an example for that
particular user's value.

00:15:59.870 --> 00:16:04.565
So clearly the first part prior
to the colon is the user name

00:16:04.565 --> 00:16:07.745
and the second part is the user's email,

00:16:07.745 --> 00:16:09.950
very simple example,

00:16:09.950 --> 00:16:12.635
but it goes far enough to prove a point.

00:16:12.635 --> 00:16:18.590
So to be able to convert that
long String into 2 attributes,

00:16:18.590 --> 00:16:22.280
we simply have to define
a class, give it a name,

00:16:22.280 --> 00:16:26.705
and tell the JVM that it
implements a Converter for

00:16:26.705 --> 00:16:32.885
the sub class of the
ExampleConfiguration interface.

00:16:32.885 --> 00:16:38.100
Then simply Override the
convert method.

00:16:38.260 --> 00:16:44.390
Getting a string that is obviously the
value of the property as a parameter

00:16:44.390 --> 00:16:48.170
and then do whatever
processing that you need to.

00:16:48.170 --> 00:16:50.570
You just have to return

00:16:50.570 --> 00:16:57.680
the correct type for the
converters generics configuration.

00:16:57.680 --> 00:17:00.320
Now, once you've implemented a converter,

00:17:00.320 --> 00:17:05.195
of course, you have to
let Quarkus know about it.

00:17:05.195 --> 00:17:11.870
You simply have to create a META-INF/services / directory inside src/

00:17:11.870 --> 00:17:14.900
main/resources/ and put an org.eclipse.

00:17:14.900 --> 00:17:19.250
microprofile.config.spi.Converter file into it.

00:17:19.250 --> 00:17:23.105
So this is a file and the
contents of this file

00:17:23.105 --> 00:17:28.265
must contain the Fully Qualified
Name of your Converter class.

00:17:28.265 --> 00:17:34.055
So org.acme.example,
ExampleUserConverter.

00:17:34.055 --> 00:17:36.710
Let's head on to the next
exercise where we inject

00:17:36.710 --> 00:17:39.530
some configuration data
into our applications.

00:17:39.530 --> 00:17:41.280
See you there.

