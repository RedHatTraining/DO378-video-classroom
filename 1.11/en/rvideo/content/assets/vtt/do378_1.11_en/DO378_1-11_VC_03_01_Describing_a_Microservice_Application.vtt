WEBVTT

00:00:00.000 --> 00:00:05.610
Welcome back to the chapter on deploying
microservice based applications.

00:00:05.610 --> 00:00:08.940
And in the first section we are
going to have a quick look at

00:00:08.940 --> 00:00:12.510
the example microservice application

00:00:12.510 --> 00:00:16.080
that we're using in mostly
end of chapter labs

00:00:16.080 --> 00:00:19.215
but also in certain
exercises along the way.

00:00:19.215 --> 00:00:22.350
We have got an exercise where we

00:00:22.350 --> 00:00:26.110
deploy this application as well
and then have a look around it.

00:00:26.110 --> 00:00:29.885
Then we're going to have a look
at how to deploy microservices

00:00:29.885 --> 00:00:34.775
in OpenShift Container Platform
and a guided exercise about that.

00:00:34.775 --> 00:00:36.965
And finally, how to deploy

00:00:36.965 --> 00:00:41.480
Quarkus applications in OpenShift
in an exercise about that as well.

00:00:41.480 --> 00:00:43.040
The standard end of

00:00:43.040 --> 00:00:47.630
Chapter Challenge exercise reviews
the entire chapter's contents.

00:00:47.630 --> 00:00:53.150
Having a look at Conference application,

00:00:53.150 --> 00:00:56.840
it's basically a slightly
modified version of

00:00:56.840 --> 00:00:59.719
the MicroProfile Conference application

00:00:59.719 --> 00:01:02.900
that is provided as a
set of good practices,

00:01:02.900 --> 00:01:08.150
in example techniques by the
Eclipse MicroProfile project.

00:01:08.150 --> 00:01:12.065
We're using the Quarkus
Conference application.

00:01:12.065 --> 00:01:14.690
The intent of this
application is basically

00:01:14.690 --> 00:01:20.210
to handle the requirements
of managing a conference.

00:01:20.210 --> 00:01:26.480
So it will have a schedule that's the
main part obviously of a conference,

00:01:26.480 --> 00:01:30.439
which is a plan of lectures,

00:01:30.439 --> 00:01:35.420
including the speakers
that present the sessions,

00:01:35.420 --> 00:01:40.145
the attendees, and the optional
votes post the session.

00:01:40.145 --> 00:01:43.610
So we have a number of entities already.

00:01:43.610 --> 00:01:48.365
Speakers, attendees, votes, and sessions.

00:01:48.365 --> 00:01:52.910
Every entity that we're going to
use has a generated identifier,

00:01:52.910 --> 00:01:58.205
so we do not use explicit
fields as entity identifiers.

00:01:58.205 --> 00:02:01.550
Schedules consist of several sessions.

00:02:01.550 --> 00:02:07.025
Sessions are presented by many speakers
and attended by many attendees.

00:02:07.025 --> 00:02:09.200
The same speaker can give many sessions,

00:02:09.200 --> 00:02:11.585
although obviously not at the same time.

00:02:11.585 --> 00:02:17.600
And the same attendee can rate the same
or different sessions multiple times.

00:02:17.600 --> 00:02:23.030
So our example application
encompasses 4 main microservices,

00:02:23.030 --> 00:02:26.375
each one related to another,

00:02:26.375 --> 00:02:32.070
according to the entities that
are displayed in this diagram.

00:02:33.370 --> 00:02:41.045
For the sake of showing different
situations, different application decisions

00:02:41.045 --> 00:02:45.185
each microservice uses a slightly
different design choice.

00:02:45.185 --> 00:02:47.000
Some microservices, for example,

00:02:47.000 --> 00:02:48.649
use an in-memory database,

00:02:48.649 --> 00:02:52.520
although the others might
rely on external database,

00:02:52.520 --> 00:02:55.565
some microservices use
the Active Record pattern

00:02:55.565 --> 00:02:57.920
that we've mentioned in
the previous chapter.

00:02:57.920 --> 00:03:02.915
Others rely on the classic
DAO data access object

00:03:02.915 --> 00:03:07.084
or even inject store beans
which manage persistence.

00:03:07.084 --> 00:03:10.040
Now the following diagram
actually shows us

00:03:10.040 --> 00:03:15.980
what we'll be doing with the conference
application throughout the course.

00:03:15.980 --> 00:03:18.650
We'll be creating it incrementally,

00:03:18.650 --> 00:03:22.340
so some components will not
be available at all times.

00:03:22.340 --> 00:03:24.905
We've actually created the speaker

00:03:24.905 --> 00:03:27.799
application or a part of
it in the previous exercise,

00:03:27.799 --> 00:03:30.095
that is end of chapter lab, right?

00:03:30.095 --> 00:03:33.650
So what we have is a web user interface.

00:03:33.650 --> 00:03:37.025
We won't be
delving into this one.

00:03:37.025 --> 00:03:40.070
There's going to be an
authorization web service,

00:03:40.070 --> 00:03:41.570
the speaker web service,

00:03:41.570 --> 00:03:44.300
which should already be known
from the previous end of

00:03:44.300 --> 00:03:48.635
Chapter lab that uses an
H2 in-memory database.

00:03:48.635 --> 00:03:51.635
There's going to be a
sessions application

00:03:51.635 --> 00:03:54.755
that uses a Postgres data
store in the back-end.

00:03:54.755 --> 00:03:58.040
A schedule application,
which uses another in-memory

00:03:58.040 --> 00:04:01.310
Derby database and a voting microservice,

00:04:01.310 --> 00:04:04.010
which uses MongoDB for its datastore.

00:04:04.010 --> 00:04:10.250
To simplify the
discovery of these microservices,

00:04:10.250 --> 00:04:14.225
we do have sort of an API gateway

00:04:14.225 --> 00:04:18.500
which centralizes the end
points in a single host,

00:04:18.500 --> 00:04:20.000
under a single host name,

00:04:20.000 --> 00:04:24.455
and enriches communications from clients,

00:04:24.455 --> 00:04:26.300
such as a web user interface,

00:04:26.300 --> 00:04:32.945
and it provides centralized
authentication using JSON Web Tokens.

00:04:32.945 --> 00:04:38.480
Now, the authorization application
is going to be a mock microservice.

00:04:38.480 --> 00:04:42.949
So it basically simply generates

00:04:42.949 --> 00:04:48.185
authentication token and simulates a more
complex identity management service.

00:04:48.185 --> 00:04:51.920
And as we said, the Web user
interface is a finish Pattern

00:04:51.920 --> 00:04:55.850
Fly application that is used to
visualize the whole application.

00:04:55.850 --> 00:04:58.610
We have an extensive list of

00:04:58.610 --> 00:05:01.415
endpoints that are available
in different microservices.

00:05:01.415 --> 00:05:05.000
Feel free to consult
the table that you see,

00:05:05.000 --> 00:05:09.560
in the book, to get

00:05:09.560 --> 00:05:10.700
acquainted with some of

00:05:10.700 --> 00:05:15.020
the more commonly used endpoints
exposed by the applications.

00:05:15.020 --> 00:05:19.265
Despite being a relatively
complete application,

00:05:19.265 --> 00:05:23.569
this conference conglomerate
of microservices

00:05:23.569 --> 00:05:27.560
is obviously far from being ready
for production use because we

00:05:27.560 --> 00:05:31.280
have used some workarounds and

00:05:31.280 --> 00:05:37.595
even unsafe practices to simplify
the entire code base.

00:05:37.595 --> 00:05:42.140
For example, there is
embedded database usage,

00:05:42.140 --> 00:05:45.350
which is definitely not recommended

00:05:45.350 --> 00:05:48.905
unless your application is
supposed to be transient.

00:05:48.905 --> 00:05:51.200
You should not use in-memory databases.

00:05:51.200 --> 00:05:55.640
You should persist application
data in an external datastore.

00:05:55.640 --> 00:05:57.350
It could be a database,

00:05:57.350 --> 00:05:58.610
could be a file system.

00:05:58.610 --> 00:06:00.035
It could be distributed cache,

00:06:00.035 --> 00:06:05.600
anything that can restore the data
after an application shut down.

00:06:05.600 --> 00:06:09.680
We will be storing passwords for databases in

00:06:09.680 --> 00:06:13.340
plain text for the configuration
of our microservices.

00:06:13.340 --> 00:06:18.470
Again, that is not something that
we would normally do in production,

00:06:18.470 --> 00:06:22.520
despite the fact that may be
deployed in trusted environments.

00:06:22.520 --> 00:06:26.705
So we would use other
approaches like Kubernetes

00:06:26.705 --> 00:06:28.415
secrets or some sort of

00:06:28.415 --> 00:06:33.215
safe storage solution like
Vault or something of the sort.

00:06:33.215 --> 00:06:38.720
The authorization service, the AuthZ
is a mock identity management service.

00:06:38.720 --> 00:06:42.485
So generally, of course in production,

00:06:42.485 --> 00:06:45.830
we would use something like LDAP,

00:06:45.830 --> 00:06:50.330
SSL solutions like Red Hat SSO, KeyCloack,

00:06:50.330 --> 00:06:54.590
not something that just
simply grants everybody access.

00:06:54.590 --> 00:06:56.630
We will discuss CORS a little bit later

00:06:56.630 --> 00:07:01.760
but all the microservices have Cross-origin
resource sharing filters enabled.

00:07:01.760 --> 00:07:06.050
But those filters are completely
misconfigured when it

00:07:06.050 --> 00:07:10.985
comes to production environments because
they allow requests from any origin.

00:07:10.985 --> 00:07:14.510
It is a much safer practice to limit

00:07:14.510 --> 00:07:17.900
the allowed origins only
to those that are trusted.

00:07:17.900 --> 00:07:22.310
So for example, simply the
location of your web application

00:07:22.310 --> 00:07:27.930
and perhaps locations of the
known other entry points.

00:07:28.150 --> 00:07:33.710
Also the exercises enable
the Swagger user interface,

00:07:33.710 --> 00:07:35.690
the web user interface that allows

00:07:35.690 --> 00:07:40.190
the API documentation and
endpoints to be exposed.

00:07:40.190 --> 00:07:45.035
When deploying Quarkus applications
to production,

00:07:45.035 --> 00:07:48.020
Swagger is actually
disabled unless you turn it

00:07:48.020 --> 00:07:52.020
on explicitly because that
is simply a better practice.

00:07:52.090 --> 00:07:57.650
As of right now we do not have any
API gateway application really,

00:07:57.650 --> 00:08:04.040
so front end and the microservices
communicate directly,

00:08:04.040 --> 00:08:05.810
which means that the front end needs to be

00:08:05.810 --> 00:08:09.350
configured to know where
those microservices are

00:08:09.350 --> 00:08:12.050
and there is no enrichment of

00:08:12.050 --> 00:08:17.795
the responses from the microservices
as they are provided to the application.

00:08:17.795 --> 00:08:23.960
That being said, we do have an exercise
coming up where we're going to start

00:08:23.960 --> 00:08:25.550
all the services that compose

00:08:25.550 --> 00:08:27.965
the Quarkus Conference application

00:08:27.965 --> 00:08:31.055
and familiarize ourselves with
the front end a little bit.

00:08:31.055 --> 00:08:33.390
Join us in the next video.

