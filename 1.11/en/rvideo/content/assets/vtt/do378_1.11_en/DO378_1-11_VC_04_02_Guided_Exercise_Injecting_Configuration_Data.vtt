WEBVTT

00:00:00.000 --> 00:00:03.120
Let's inject some configuration data
in a couple of different ways in

00:00:03.120 --> 00:00:06.660
our familiar expenses microservice.

00:00:06.660 --> 00:00:11.640
So we will start with lab
apps-inject start script,

00:00:11.640 --> 00:00:14.640
which populates the source course directory.

00:00:14.640 --> 00:00:19.920
If we move over, there going to
/labs/apps-inject/expense-service/,

00:00:19.920 --> 00:00:23.955
we can see that the ExpenseResource.

00:00:23.955 --> 00:00:26.910
java is actually a class that has

00:00:26.910 --> 00:00:31.500
the expense limits hard-coded
into the application,

00:00:31.500 --> 00:00:33.030
so that's obviously not good.

00:00:33.030 --> 00:00:37.304
So what it does with these 2 numbers,

00:00:37.304 --> 00:00:38.970
it first of all,

00:00:38.970 --> 00:00:46.535
if we are looking at the create method,
that's around line 40, it says,

00:00:46.535 --> 00:00:52.550
if the expense amount is larger than
the maximum single expense amount,

00:00:52.550 --> 00:00:58.655
it throws an error and sets the
Response.Status to NOT ACCEPTABLE.

00:00:58.655 --> 00:01:02.930
Then a couple of lines
further down around line 53,

00:01:02.930 --> 00:01:06.650
it checks that the total
amount of all expenses in

00:01:06.650 --> 00:01:10.160
a month is not larger than
max monthly expense amount.

00:01:10.160 --> 00:01:11.810
And again, if it is,

00:01:11.810 --> 00:01:15.290
displays an error string in
the exception that it throws

00:01:15.290 --> 00:01:19.610
and sets the Response.Status
as NOT_ACCEPTABLE.

00:01:19.610 --> 00:01:21.260
Let's try that out.

00:01:21.260 --> 00:01:26.435
So trying to running the application
using mvn quarkus:dev.

00:01:26.435 --> 00:01:29.040
Once it starts up,

00:01:29.320 --> 00:01:32.585
we can send a couple of requests.

00:01:32.585 --> 00:01:35.810
For example, the first
one would have been the

00:01:35.810 --> 00:01:41.780
$3,500 expense for Medical
Insurance paid with a DEBIT_CARD,

00:01:41.780 --> 00:01:45.110
we get an expense nicely displayed,

00:01:45.110 --> 00:01:47.915
returned on the standard output.

00:01:47.915 --> 00:01:52.640
Now if I tried to submit
a request in the value

00:01:52.640 --> 00:01:57.290
of $7,500 for a holiday on top
of that medical insurance,

00:01:57.290 --> 00:01:59.240
I did not get a response.

00:01:59.240 --> 00:02:01.475
That's because there is no response.

00:02:01.475 --> 00:02:04.100
If I add verbose output to curl,

00:02:04.100 --> 00:02:07.070
we can see that the
response from the server

00:02:07.070 --> 00:02:10.310
is simply 406, Not Acceptable.

00:02:10.310 --> 00:02:15.650
Having a look at what the
application server had printed out,

00:02:15.650 --> 00:02:18.965
it literally says, Expense amount
is larger than the limit,

00:02:18.965 --> 00:02:21.860
which is 5000. Right!

00:02:21.860 --> 00:02:27.425
Stopping the server and changing
the ExpenseResource a little bit.

00:02:27.425 --> 00:02:30.335
What we will be adding is first,

00:02:30.335 --> 00:02:33.440
we'll be making the singleLimitErrorMsg

00:02:33.440 --> 00:02:36.380
and monthlyLimitErrorMsg
configurable by

00:02:36.380 --> 00:02:39.290
adding 2 string fields just underneath

00:02:39.290 --> 00:02:43.115
the maxSingleExpenseAmount and
maxMonthlyExpenseAmount.

00:02:43.115 --> 00:02:45.080
And then of course,

00:02:45.080 --> 00:02:48.245
replacing the hard-coded
strings in the methods

00:02:48.245 --> 00:02:52.340
with a reference to the fields
that we have just created.

00:02:52.340 --> 00:02:54.470
So that's both for the singular limit

00:02:54.470 --> 00:02:57.260
and for the monthly limit error message,

00:02:57.260 --> 00:03:00.155
we simply replace that
with the field name.

00:03:00.155 --> 00:03:03.800
The next one, the next change
we are going to do is

00:03:03.800 --> 00:03:06.920
we are going to import the ConfigProperty

00:03:06.920 --> 00:03:12.500
annotation and annotate
all 4 of the new strings.

00:03:12.500 --> 00:03:17.240
So the maxSingleExpenseAmount
and the maxMonthlyExpenseAmount,

00:03:17.240 --> 00:03:20.450
going to annotate them
with the @ConfigProperty,

00:03:20.450 --> 00:03:25.460
converting the camelCase field
name to something that looks

00:03:25.460 --> 00:03:27.650
a little bit nicer in
the property file max-

00:03:27.650 --> 00:03:30.500
single-expense-amount.

00:03:30.500 --> 00:03:36.170
And we will be doing the same
for the error messages

00:03:36.170 --> 00:03:38.660
except that the string
that we've initialized in

00:03:38.660 --> 00:03:42.260
to is now going to be used as
the defaultValue here.

00:03:42.260 --> 00:03:44.870
So we are not initializing
the field anymore,

00:03:44.870 --> 00:03:47.600
the @ConfigProperty
annotation is doing that.

00:03:47.600 --> 00:03:53.640
And again, both for single and
monthly limit error messages.

00:03:53.640 --> 00:03:59.095
Of course now we have to add
this to application properties,

00:03:59.095 --> 00:04:00.820
so there it is.

00:04:00.820 --> 00:04:04.090
We have added 2 attributes,

00:04:04.090 --> 00:04:06.115
max-single-expense-amount,

00:04:06.115 --> 00:04:07.990
setting it to 4000.

00:04:07.990 --> 00:04:09.910
I have just jumped ahead and

00:04:09.910 --> 00:04:13.270
set max-monthly-expense-amount to 9001 and

00:04:13.270 --> 00:04:18.835
in reality, in this stage you
would have simply setting it to 7500.

00:04:18.835 --> 00:04:23.950
But I have adjusted the values
in my tests to match my limit.

00:04:23.950 --> 00:04:30.320
So trying it out, starting the Quarkus

00:04:30.900 --> 00:04:35.050
in development mode, we can see

00:04:35.050 --> 00:04:41.045
that there are some injections
automatically added to the source code.

00:04:41.045 --> 00:04:45.080
I am going back to our client window.

00:04:45.080 --> 00:04:50.495
I will be setting a new
expense of 7500 dollars.

00:04:50.495 --> 00:04:56.480
Again, sending that request to the
application server and immediately says,

00:04:56.480 --> 00:05:00.200
it's Not Acceptable because it is not for

00:05:00.200 --> 00:05:05.090
a single expense and prints
out the actual message.

00:05:05.090 --> 00:05:07.025
Expense amount is larger than limit,

00:05:07.025 --> 00:05:11.555
which correctly reflects our
application property's value.

00:05:11.555 --> 00:05:13.850
In the next request,

00:05:13.850 --> 00:05:18.590
I will be creating a $4000
expense for Holiday.

00:05:18.590 --> 00:05:21.245
Which says, OK

00:05:21.245 --> 00:05:23.465
and then another 4000,

00:05:23.465 --> 00:05:25.400
which is 8000 altogether,

00:05:25.400 --> 00:05:27.620
which says OK again. Now,

00:05:27.620 --> 00:05:30.035
when I try for the third time,

00:05:30.035 --> 00:05:33.215
I will be going over the limit.

00:05:33.215 --> 00:05:35.990
So the third request to create

00:05:35.990 --> 00:05:41.480
new expense as 3 Holidays, 4000 
each would amount to 12000,

00:05:41.480 --> 00:05:44.120
which of course is Not Acceptable.

00:05:44.120 --> 00:05:47.000
If you look at the
application server logs,

00:05:47.000 --> 00:05:50.524
it says clearly, if expense is accepted,

00:05:50.524 --> 00:05:53.660
it would exceed the monthly limit
and correctly again reflects

00:05:53.660 --> 00:05:58.110
the dynamically loaded value
from application properties.

00:05:59.380 --> 00:06:02.450
Let's change the
application properties and

00:06:02.450 --> 00:06:04.820
change the max-monthly-expense-amount

00:06:04.820 --> 00:06:09.980
from 7500 in your case to
something much larger from

00:06:09.980 --> 00:06:13.370
my case from 9001 to 15000.

00:06:13.370 --> 00:06:18.875
Just to prove that
dynamic reload will happen,

00:06:18.875 --> 00:06:25.340
so, going for 4000
once success, twice

00:06:25.340 --> 00:06:27.515
success,

00:06:27.515 --> 00:06:32.630
thrice, that's 1200 still success

00:06:32.630 --> 00:06:36.380
and the fourth time it
would have hit 16000,

00:06:36.380 --> 00:06:38.600
which would have been above the limit,

00:06:38.600 --> 00:06:40.730
and again says Not Acceptable.

00:06:40.730 --> 00:06:43.190
The first request I made after changing

00:06:43.190 --> 00:06:47.340
application properties
actually reloaded Quarkus

00:06:47.350 --> 00:06:51.530
and ultimately, the fourth request,

00:06:51.530 --> 00:06:56.195
which would have bumped it
across the 15000 limit to 16000,

00:06:56.195 --> 00:06:59.135
correctly reports the new value.

00:06:59.135 --> 00:07:01.069
Stop in Quarkus,

00:07:01.069 --> 00:07:06.155
let's refactor our
annotated service class.

00:07:06.155 --> 00:07:09.860
We are going to remove any
configuration annotations from

00:07:09.860 --> 00:07:13.280
the web service classic is
that's not about configuration,

00:07:13.280 --> 00:07:15.215
it's about web service, right?

00:07:15.215 --> 00:07:20.915
So we are going to introduce a
new expense configuration class.

00:07:20.915 --> 00:07:23.165
If we have a look at it,

00:07:23.165 --> 00:07:29.360
it is using the ConfigProperty and
the @ConfigProperties annotation.

00:07:29.360 --> 00:07:36.179
The @ConfigProperties annotation
is selecting the expense prefix,

00:07:36.610 --> 00:07:41.960
so any attribute under the expense.

00:07:41.960 --> 00:07:44.690
anything in the application
properties file would have

00:07:44.690 --> 00:07:47.990
been injected into this set of properties.

00:07:47.990 --> 00:07:52.970
The reason why we still use ConfigProperty singular is because we

00:07:52.970 --> 00:07:57.815
want to set the defaultValue
for the error messages.

00:07:57.815 --> 00:08:00.770
That is it. Of course,

00:08:00.770 --> 00:08:05.480
we have to change the application.
properties to qualify

00:08:05.480 --> 00:08:10.580
the expense amounts under
the expense.namespace.

00:08:10.580 --> 00:08:16.220
That's what the ConfigProperties
expect to be or expects them to be.

00:08:16.220 --> 00:08:19.640
So we need to add 
expense.prefix to both of them.

00:08:19.640 --> 00:08:24.209
And then changing the 
ExpenseResource,

00:08:24.940 --> 00:08:30.440
we are going to remove any
ConfigProperty annotations,

00:08:30.440 --> 00:08:32.300
any sort of trace of

00:08:32.300 --> 00:08:35.570
these 4 properties that we've
previously been manipulating,

00:08:35.570 --> 00:08:37.670
so just removing all these,

00:08:37.670 --> 00:08:41.195
but we are going to inject
the ExpenseConfiguration now

00:08:41.195 --> 00:08:45.335
because that is where our
configuration is now stored.

00:08:45.335 --> 00:08:50.030
And that means simply that whenever
we are accessing these fields,

00:08:50.030 --> 00:08:51.635
which we have now removed,

00:08:51.635 --> 00:08:55.430
we have to access them from
the configuration class.

00:08:55.430 --> 00:09:00.035
So instead of comparing to
maxSingleExpenseAmount,

00:09:00.035 --> 00:09:05.150
we will be comparing to configuration.getMaxSingleExpenseAmount.

00:09:05.150 --> 00:09:09.800
Similarly, when we are trying to format a
message instead of directly accessing

00:09:09.800 --> 00:09:12.080
singleLimitErrorMsg, we will be accessing

00:09:12.080 --> 00:09:15.755
configuration.getSingleLimitErrorMsg.

00:09:15.755 --> 00:09:18.500
And it's the same with the monthly amount,

00:09:18.500 --> 00:09:20.884
so we will simply be replacing

00:09:20.884 --> 00:09:28.160
direct field access with the getter invocation 
from the configuration class.

00:09:28.160 --> 00:09:31.715
Restarting Quarkus

00:09:31.715 --> 00:09:35.090
and going back to our client,

00:09:35.090 --> 00:09:42.125
when we send an amount of 4000 for
the first expense, it is accepted.

00:09:42.125 --> 00:09:43.370
That's fine.

00:09:43.370 --> 00:09:48.800
So let's try changing the message
using an environment variable.

00:09:48.800 --> 00:09:52.385
So stopping Quarkus and setting

00:09:52.385 --> 00:09:57.485
the EXPENSE_SINGLE_LIMIT_ERROR_MSG
environment variable to Too big,

00:09:57.485 --> 00:10:03.590
and then restarting Quarkus
in dev mode. Here we go.

00:10:03.590 --> 00:10:07.400
If I tried to create an
expense that is $10000

00:10:07.400 --> 00:10:11.540
I have now switched back
to 9001 is a maximum,

00:10:11.540 --> 00:10:14.510
but any rate that's a monthly maximum,

00:10:14.510 --> 00:10:17.060
single maximum, I'm above all limits.

00:10:17.060 --> 00:10:21.740
So that would trigger the
single limit error message.

00:10:21.740 --> 00:10:24.305
And as you can see,

00:10:24.305 --> 00:10:29.885
it actually does report and the
exception log is now Too big.

00:10:29.885 --> 00:10:30.980
Right!

00:10:30.980 --> 00:10:34.310
Stopping the existing Quarkus instance,

00:10:34.310 --> 00:10:35.660
we can now clean up,

00:10:35.660 --> 00:10:40.385
running the lab apps-inject finish script.

00:10:40.385 --> 00:10:45.380
After it cleans up and removes
all the exercise resources,

00:10:45.380 --> 00:10:47.750
just join us in the next video where we are

00:10:47.750 --> 00:10:50.570
going to talk about Feature Toggles.

00:10:50.570 --> 00:10:52.260
See you there.

