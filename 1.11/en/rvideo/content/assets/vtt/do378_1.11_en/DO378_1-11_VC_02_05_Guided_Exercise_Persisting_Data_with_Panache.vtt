WEBVTT

00:00:00.000 --> 00:00:04.800
In this exercise, we are going to persist
some data with Panache in practice.

00:00:04.800 --> 00:00:07.980
We are going to start with lab implement-

00:00:07.980 --> 00:00:12.180
persist start script, which
populates our working directory with

00:00:12.180 --> 00:00:18.480
some example source code that we are
then going to modify and complete.

00:00:18.480 --> 00:00:20.970
The working directory is DO378/

00:00:20.970 --> 00:00:25.304
/labs/implement-persist/expense-service/.

00:00:25.304 --> 00:00:30.055
Now, you would obviously open
this directory in VSCodium

00:00:30.055 --> 00:00:36.440
whereas I have chosen as I
announced, command line approach.

00:00:36.440 --> 00:00:42.380
So what I'm going to show you is another
way of adding extensions to project,

00:00:42.380 --> 00:00:47.240
simply using mvn quarkus:add-extensions, command or goal.

00:00:47.240 --> 00:00:51.785
And then specifying the extensions
property using minus capital D,

00:00:51.785 --> 00:00:59.660
simply listing the extensions you want
to add as the value to that property.

00:00:59.660 --> 00:01:03.470
Quarkus tries to search
for these extensions

00:01:03.470 --> 00:01:07.310
and that means they do not
have to be exact names,

00:01:07.310 --> 00:01:10.310
but they have to be specific
enough such that there are

00:01:10.310 --> 00:01:14.510
no ambiguities otherwise it will
complain it cannot add extension,

00:01:14.510 --> 00:01:18.095
so, that's why I just
simply use their full names.

00:01:18.095 --> 00:01:19.550
As you can see here,

00:01:19.550 --> 00:01:25.310
it says that both extensions have
been added to pom xml as dependencies.

00:01:25.310 --> 00:01:28.370
Now, the first thing we're going to do is

00:01:28.370 --> 00:01:33.020
configure Panache in src/main/resources/application.properties.

00:01:33.020 --> 00:01:37.730
What we are going to do is add to
the existing swagger-ui.always-

00:01:37.730 --> 00:01:43.190
include parameter, selecting that
the db-kind is going to be h2,

00:01:43.190 --> 00:01:46.700
which is the driver that
we added, the jdbc.url

00:01:46.700 --> 00:01:50.405
for it will be jdbc:h2:mem:default.

00:01:50.405 --> 00:01:52.160
The username will be admin,

00:01:52.160 --> 00:01:57.875
and the hibernate property for database
generation will be drop-and-create,

00:01:57.875 --> 00:02:01.460
to create the tables and then
drop them upon shutdown.

00:02:01.460 --> 00:02:04.955
We're going to modify the expense class by

00:02:04.955 --> 00:02:09.140
adding a couple of annotations
and changes to it.

00:02:09.140 --> 00:02:11.570
So compared to the original,

00:02:11.570 --> 00:02:14.720
what we did was skipping
the imports because

00:02:14.720 --> 00:02:18.875
obviously VSCodium
will take care of these.

00:02:18.875 --> 00:02:23.135
We replace the bear public
class Expense declaration,

00:02:23.135 --> 00:02:27.305
making it a PanacheEntity extension.

00:02:27.305 --> 00:02:30.815
And we made sure we added
the @Entity annotation.

00:02:30.815 --> 00:02:33.920
We added also a parameter less

00:02:33.920 --> 00:02:39.154
constructor because that's
what's needed for a JPA entities.

00:02:39.154 --> 00:02:43.775
And then we've added an update method

00:02:43.775 --> 00:02:50.450
which essentially takes an
Expense as a parameter,

00:02:50.450 --> 00:02:55.565
has a look at whether the expense
already exists in the database

00:02:55.565 --> 00:02:59.780
and then if it is present in the database,

00:02:59.780 --> 00:03:08.900
it updates it by creating the expense,

00:03:08.900 --> 00:03:14.750
by populating the expense fields
from the parameter itself.

00:03:14.750 --> 00:03:18.850
This is a lambda
expression, as you can see.

00:03:18.850 --> 00:03:25.330
So it defines an inferred update field and

00:03:25.330 --> 00:03:28.000
then simply copies the final parameters

00:03:28.000 --> 00:03:31.840
fields into the inferred
parameters fields.

00:03:31.840 --> 00:03:36.910
Finally using the persist method
to persist it into the database.

00:03:36.910 --> 00:03:41.245
Otherwise, if an existing
record is not found,

00:03:41.245 --> 00:03:43.660
the update shall return an error.

00:03:43.660 --> 00:03:46.690
Because we cannot update
something that isn't there,

00:03:46.690 --> 00:03:48.475
we need to persist it.

00:03:48.475 --> 00:03:53.560
So that was the complete set of
modifications to our entity.

00:03:53.560 --> 00:03:57.220
Now, the next thing we are going
to do is we are going to modify

00:03:57.220 --> 00:04:01.030
the REST web service
such that we no longer

00:04:01.030 --> 00:04:05.545
need the expense service
business logic class, right?

00:04:05.545 --> 00:04:08.920
Looking at the ExpenseResource.java file

00:04:08.920 --> 00:04:12.760
again, just going through
the modifications,

00:04:12.760 --> 00:04:15.910
we will no longer use the ExpenseService.

00:04:15.910 --> 00:04:17.995
We will obsolete it completely because

00:04:17.995 --> 00:04:22.255
all the persistence related code
is now in our entity class.

00:04:22.255 --> 00:04:24.879
So instead of, for example,

00:04:24.879 --> 00:04:26.470
injecting the ExpenseService,

00:04:26.470 --> 00:04:28.450
which we don't do at all anymore,

00:04:28.450 --> 00:04:33.280
instead of invoking it to return
a list of existing expenses,

00:04:33.280 --> 00:04:36.910
we will just simply use the listAll
method inherited from

00:04:36.910 --> 00:04:42.060
Panache entity into our Expense entity.

00:04:42.060 --> 00:04:48.395
Making sure we mark any data
modification methods as @Transactional

00:04:48.395 --> 00:04:53.720
again, we're replacing the service.create method invocation with

00:04:53.720 --> 00:04:59.690
simple call to the newExpense.persist method.

00:04:59.690 --> 00:05:02.600
So the newExpense is already
created on the line 

00:05:02.600 --> 00:05:03.365
above,

00:05:03.365 --> 00:05:06.260
all we need to do is replace
the service.create

00:05:06.260 --> 00:05:09.724
invocation with newExpense persist.

00:05:09.724 --> 00:05:13.625
Similar to the delete method,

00:05:13.625 --> 00:05:19.700
so what we're going to do is instead
of invoking service.delete method,

00:05:19.700 --> 00:05:25.460
we will actually call Expense.Delete 
with the uuid parameter,

00:05:25.460 --> 00:05:27.065
which should be unique.

00:05:27.065 --> 00:05:31.925
It does return number of
records that have been deleted.

00:05:31.925 --> 00:05:33.680
Now instead of checking for

00:05:33.680 --> 00:05:36.755
the Boolean which the services
delete method return,

00:05:36.755 --> 00:05:41.240
we will check whether the number of
deleted records is 0 and complain.

00:05:41.240 --> 00:05:42.710
Otherwise,

00:05:42.710 --> 00:05:47.165
we will simply return
the remaining objects,

00:05:47.165 --> 00:05:51.620
so Expense.listAll no
longer service.list.

00:05:51.620 --> 00:05:55.040
And finally, in the PUT method,

00:05:55.040 --> 00:05:57.860
which we also mark as Transactional,

00:05:57.860 --> 00:06:02.930
we will replace the service.update invocation

00:06:02.930 --> 00:06:05.750
with simple Expense.update invocation,

00:06:05.750 --> 00:06:07.070
which as we've seen,

00:06:07.070 --> 00:06:09.155
we've just added it to the expense

00:06:09.155 --> 00:06:12.830
entity, will complain if there's

00:06:12.830 --> 00:06:17.015
no expense found, the same as it
would have in the service method,

00:06:17.015 --> 00:06:19.775
which we are going to now delete.

00:06:19.775 --> 00:06:22.490
The only thing we still
need to take care of

00:06:22.490 --> 00:06:24.965
before we remove the ExpenseService

00:06:24.965 --> 00:06:32.120
java file, is the initialization of data
upon the start of the application.

00:06:32.120 --> 00:06:34.670
We have a post construct method called

00:06:34.670 --> 00:06:38.000
initData in the ExpenseService.java,

00:06:38.000 --> 00:06:40.895
which adds 2 new expenses.

00:06:40.895 --> 00:06:46.340
We are simply going to replace
that with an import.sql file,

00:06:46.340 --> 00:06:49.040
which is automatically used, if it's

00:06:49.040 --> 00:06:53.435
found upon the Hibernate ORM
than the Panache startup.

00:06:53.435 --> 00:06:56.110
So we're simply going to put

00:06:56.110 --> 00:07:02.735
the raw SQL code needed to insert
the 2 records into the database.

00:07:02.735 --> 00:07:06.785
And now we can finally
remove the expense service.

00:07:06.785 --> 00:07:11.315
Using Maven with the quarkus dev goal,

00:07:11.315 --> 00:07:14.555
there is going to be a
whole lot of downloading

00:07:14.555 --> 00:07:18.545
because this is the first time
I've built this application.

00:07:18.545 --> 00:07:24.059
So it has to download all the
dependencies in Maven plug-ins.

00:07:24.850 --> 00:07:27.335
Ultimately,

00:07:27.335 --> 00:07:32.405
going into the startup mode with Quarkus,

00:07:32.405 --> 00:07:35.900
you can ignore this complaint from Maven.

00:07:35.900 --> 00:07:39.245
It's about the global settings XML file.

00:07:39.245 --> 00:07:42.140
It's probably not going to happen for you.

00:07:42.140 --> 00:07:48.845
And here we can see Quarkus is up
listening on local host port 8080.

00:07:48.845 --> 00:07:51.095
So let's exercise is a little bit,

00:07:51.095 --> 00:07:53.735
leave it running in another terminal.

00:07:53.735 --> 00:07:57.335
I've prepared an expense file,

00:07:57.335 --> 00:08:01.400
which I'm going to send using curl,

00:08:01.400 --> 00:08:05.810
making sure that the Content-Type of
this request is set to application/json

00:08:05.810 --> 00:08:10.340
because that's what our application
consumes, I'm using the post method

00:08:10.340 --> 00:08:12.695
so I'll be targeting the post,

00:08:12.695 --> 00:08:18.230
the create method inside
the expense resource class.

00:08:18.230 --> 00:08:21.770
And as the request body,
I'm sending the content

00:08:21.770 --> 00:08:25.850
of the expense.json file which is shown just above.

00:08:25.850 --> 00:08:29.840
I'm posting that to the expenses endpoint.

00:08:29.840 --> 00:08:33.080
And what I get is, as you can see,

00:08:33.080 --> 00:08:35.930
the returned id of

00:08:35.930 --> 00:08:39.020
the newly created expense along

00:08:39.020 --> 00:08:42.530
with the creationDate and the
parameters that I've specified.

00:08:42.530 --> 00:08:46.820
So if I just simply send
another GET request,

00:08:46.820 --> 00:08:51.350
again noting that I expect
json to be sent to me,

00:08:51.350 --> 00:08:55.970
if I simply send the new GET
request to the expenses endpoint of

00:08:55.970 --> 00:09:01.325
the application, piping it through
jq to get the prettier print out,

00:09:01.325 --> 00:09:07.565
we can see that the new
expense is now, here, right?

00:09:07.565 --> 00:09:14.060
That means we can stop the Quarkus runtime,
pressing Control C or shutting it

00:09:14.060 --> 00:09:17.930
down by selecting run,
stop, debugging, in VSCodium

00:09:17.930 --> 00:09:22.490
and run lab implement-
persist finish script,

00:09:22.490 --> 00:09:25.670
which is almost the last thing
we are going to do this chapter.

00:09:25.670 --> 00:09:30.180
What remains is the end of chapter
review lab. Join us there.

