WEBVTT

00:00:00.000 --> 00:00:02.505
Welcome to the chapter on
testing microservices,

00:00:02.505 --> 00:00:04.395
where we are first going to talk about

00:00:04.395 --> 00:00:07.320
how Quarkus testing works
in practice and how to

00:00:07.320 --> 00:00:10.215
implement a Quarkus microservice test case.

00:00:10.215 --> 00:00:13.140
We will have an exercise
about that afterwards.

00:00:13.140 --> 00:00:15.690
And then we are going to
have a look at how to use

00:00:15.690 --> 00:00:21.090
mock frameworks to implement the
testing of microservices at large.

00:00:21.090 --> 00:00:23.580
And we have an exercise
about that as well.

00:00:23.580 --> 00:00:25.110
At the end of the chapter,

00:00:25.110 --> 00:00:28.655
as usual, we have an end
of chapter review lab.

00:00:28.655 --> 00:00:35.030
Quarkus builds testing frameworks
relying on the JUnit5 framework.

00:00:35.030 --> 00:00:41.135
JUnit being the de facto standard for
creating and running unit tests in Java.

00:00:41.135 --> 00:00:45.260
There is a quarkus-junit5 extension that pulls in

00:00:45.260 --> 00:00:50.690
the JUnit 5 is a transitive dependency
and allows us to write unit tests

00:00:50.690 --> 00:00:55.460
using Quarkus specifics. To
create a testing Quarkus,

00:00:55.460 --> 00:00:57.230
obviously in addition to adding

00:00:57.230 --> 00:01:01.895
the quarkus-junit5 test
extension to your project,

00:01:01.895 --> 00:01:05.360
you have to override the Maven Surefire

00:01:05.360 --> 00:01:06.770
Plugin version

00:01:06.770 --> 00:01:08.805
in the build section.

00:01:08.805 --> 00:01:12.910
You have got to fix the log Manager
and the Maven home directory.

00:01:12.910 --> 00:01:17.500
That is all done by the
project code initiator.

00:01:17.500 --> 00:01:19.210
If you are using Quarkus plugins,

00:01:19.210 --> 00:01:24.130
create a goal to instantiate
a project template.

00:01:24.130 --> 00:01:28.090
Then the manual work is basically creating

00:01:28.090 --> 00:01:33.085
a test class in /src/main/
test, obviously, sorry,

00:01:33.085 --> 00:01:36.880
/src/test/java directory as usual,

00:01:36.880 --> 00:01:39.535
and annotating it with QuarkusTest.

00:01:39.535 --> 00:01:42.010
QuarkusTest is an
annotation that comes from

00:01:42.010 --> 00:01:45.955
the io.quarkus.test.junit package.

00:01:45.955 --> 00:01:48.880
Then annotate each test method with

00:01:48.880 --> 00:01:51.260
the standard Test annotation to

00:01:51.260 --> 00:01:54.335
indicate which of the methods
the framework should execute.

00:01:54.335 --> 00:01:56.885
Now of course, there are
also the usual before and

00:01:56.885 --> 00:02:00.035
after methods that you can use.

00:02:00.035 --> 00:02:02.615
When the tests are ready to run,

00:02:02.615 --> 00:02:05.825
you simply use mvn test or mvn verify,

00:02:05.825 --> 00:02:07.730
depending on what phase,

00:02:07.730 --> 00:02:10.400
what stage of testing you want to perform.

00:02:10.400 --> 00:02:14.270
Whether it's the unit tests
or integration tests.

00:02:14.270 --> 00:02:19.010
Most IDEs contain handy tools to
run unit tests. In VSCodium

00:02:19.010 --> 00:02:21.350
you are going to have the
command palette where you can

00:02:21.350 --> 00:02:25.340
simply select the command
called run unit tests.

00:02:25.340 --> 00:02:29.345
And you get a nice test report tab,

00:02:29.345 --> 00:02:33.710
alongside with your code showing you long

00:02:33.710 --> 00:02:37.760
each test took and what
its outcome status was.

00:02:37.760 --> 00:02:40.115
So you have got nice timings.

00:02:40.115 --> 00:02:42.080
For failed test,

00:02:42.080 --> 00:02:45.635
you can dig down into the
method where it failed.

00:02:45.635 --> 00:02:50.120
And you can also see what errors
have occurred during testing.

00:02:50.120 --> 00:02:50.840
Of course,

00:02:50.840 --> 00:02:54.770
tests obviously run in a
non-production environment,

00:02:54.770 --> 00:02:57.200
so it's important to be able to configure

00:02:57.200 --> 00:03:00.890
the environment that and the
dependencies that they should use.

00:03:00.890 --> 00:03:04.430
So they need their own
configuration section,

00:03:04.430 --> 00:03:06.529
of course, as we have already mentioned,

00:03:06.529 --> 00:03:08.780
the moment you run mvn test or mvn

00:03:08.780 --> 00:03:12.350
verify, the test configuration
profile is activated.

00:03:12.350 --> 00:03:20.135
So anything prefixed with a %test
in your application.properties files

00:03:20.135 --> 00:03:23.780
overrides the default that may have been

00:03:23.780 --> 00:03:29.420
set using the property
name without a prefix.

00:03:29.420 --> 00:03:32.900
So in the example that
we are looking at here,

00:03:32.900 --> 00:03:38.390
in production or any other type of
execution environment where we do not

00:03:38.390 --> 00:03:44.330
specify a specific value for this
particular property on the command line,

00:03:44.330 --> 00:03:47.360
postgresql would have been
used, but in testing,

00:03:47.360 --> 00:03:51.619
H2 database type would have been invoked.

00:03:51.619 --> 00:03:54.125
Also when it comes to loading data,

00:03:54.125 --> 00:03:56.690
if we are using a database
backend, of course,

00:03:56.690 --> 00:03:59.330
we have to be able to
differentiate between

00:03:59.330 --> 00:04:04.625
the various stages of our
applications lifecycle.

00:04:04.625 --> 00:04:10.850
So we might have to load different
SQL data when running in dev mode then

00:04:10.850 --> 00:04:15.155
in test. We can actually use the prefixes

00:04:15.155 --> 00:04:16.850
of the configuration profiles with

00:04:16.850 --> 00:04:19.790
great effect setting a quarkus.hibernate-orm.

00:04:19.790 --> 00:04:21.860
sql-load-script to

00:04:21.860 --> 00:04:27.080
various different implementations
or various different content

00:04:27.080 --> 00:04:30.410
and setting that in production,

00:04:30.410 --> 00:04:33.870
no such script should be loaded.

00:04:34.230 --> 00:04:39.295
There is some other useful configuration
properties available for test mode,

00:04:39.295 --> 00:04:42.430
such as and these do
not have a test prefix.

00:04:42.430 --> 00:04:48.460
They directly affect the
behavior of Quarkus in test mode.

00:04:48.460 --> 00:04:52.360
So quarkus.http.test-port is

00:04:52.360 --> 00:04:56.410
the port that the application should use
when running in test mode, it is not 8080,

00:04:56.410 --> 00:04:58.885
it is 8081 by default.

00:04:58.885 --> 00:05:03.010
Same for TLS, SSL, or HTTPS.

00:05:03.010 --> 00:05:05.410
It is not 8443 as is usual,

00:05:05.410 --> 00:05:07.555
but 8444.

00:05:07.555 --> 00:05:11.215
Then we have the native image builds,

00:05:11.215 --> 00:05:13.870
we will talk about native
testing a little bit later.

00:05:13.870 --> 00:05:16.935
If you are testing your native images,

00:05:16.935 --> 00:05:19.970
there is a property
that specifies how long

00:05:19.970 --> 00:05:23.465
the Quarkus is ready to wait for
the native build to complete.

00:05:23.465 --> 00:05:26.090
It defaults to 5 minutes,
which should be enough,

00:05:26.090 --> 00:05:30.170
but if your CPU is a little bit starved,

00:05:30.170 --> 00:05:34.460
then you should probably set
this a little bit higher.

00:05:34.460 --> 00:05:39.470
quarkus.test.native-image-profile is the profile,

00:05:39.470 --> 00:05:43.235
the configuration profile to use
when testing the native image.

00:05:43.235 --> 00:05:44.960
It defaults to prod.

00:05:44.960 --> 00:05:48.380
And there is also the quarkus.test.profile which

00:05:48.380 --> 00:05:51.560
you can use to specify
the configuration file to

00:05:51.560 --> 00:05:54.515
use configuration profile to use when

00:05:54.515 --> 00:05:58.250
testing using QuarkusTest and
that one defaults to test.

00:05:58.250 --> 00:06:01.565
You may want to set this to something
else for integration testing,

00:06:01.565 --> 00:06:04.175
Maven verify stage for example,

00:06:04.175 --> 00:06:06.395
so that's why it's here.

00:06:06.395 --> 00:06:10.980
quarkus.swagger-ui.always-include,

00:06:11.200 --> 00:06:17.585
determines whether or not to
enable Swagger UI

00:06:17.585 --> 00:06:21.215
when the prod profile is not enabled,

00:06:21.215 --> 00:06:23.480
it defaults to false.

00:06:23.480 --> 00:06:27.260
So if you do want Swagger
UI to be exposed,

00:06:27.260 --> 00:06:29.450
set this to true, explicitly

00:06:29.450 --> 00:06:33.905
if you are doing some sort of a
manual tests that might be handy.

00:06:33.905 --> 00:06:39.920
And http.test-timeout is timeout
for obtaining a connection and

00:06:39.920 --> 00:06:46.130
a response when using REST-assured client testing approach.

00:06:46.130 --> 00:06:50.795
So these might prove to be useful
in tweaking in tuning your tests.

00:06:50.795 --> 00:06:54.950
Now, when you need to
exercise a specific service,

00:06:54.950 --> 00:06:58.715
of course, you need to be able
to connect to it somehow.

00:06:58.715 --> 00:07:03.275
So you need to obtain a test
resource in your test class.

00:07:03.275 --> 00:07:08.480
Luckily, test classes are
Quarkus Arc managed beans,

00:07:08.480 --> 00:07:11.150
so CDI injection actually does work.

00:07:11.150 --> 00:07:14.930
And you can simply inject an
instance of your service and

00:07:14.930 --> 00:07:19.505
then exercises in any way you want.

00:07:19.505 --> 00:07:22.685
This is a direct method
invocation of course,

00:07:22.685 --> 00:07:28.850
but when you want to exercise your
applications rest endpoints remotely,

00:07:28.850 --> 00:07:31.670
so from the viewpoint of
an external consumer,

00:07:31.670 --> 00:07:36.080
you can use the @TestHTTPEndpoint annotation

00:07:36.080 --> 00:07:39.635
in combination with @TestHTTPResource annotation,

00:07:39.635 --> 00:07:45.050
providing the indication of what
kind of a service you want to inject

00:07:45.050 --> 00:07:51.905
the URL to into a
fields member of your test class.

00:07:51.905 --> 00:07:55.130
Then you simply use that endpoint without

00:07:55.130 --> 00:07:58.970
any special initialization
in your test.

00:07:58.970 --> 00:08:04.010
But it's quite awkward because you have
to deal with low level input streams,

00:08:04.010 --> 00:08:07.160
output streams, InputStreamReaders
and so on.

00:08:07.160 --> 00:08:09.920
You could do the same thing actually with

00:08:09.920 --> 00:08:13.970
a static resource without
instantiating the service,

00:08:13.970 --> 00:08:18.140
you just leave out the @TestHTTP
endpoint annotation and simply use

00:08:18.140 --> 00:08:27.290
the @TestHTTPResource annotation to
point to a file in src test web app,

00:08:27.290 --> 00:08:30.510
for example, or src main web app.

00:08:30.510 --> 00:08:35.080
Again, these are very low level
methods of accessing resources.

00:08:35.080 --> 00:08:39.430
So REST-assured might be a
better approach to that.

00:08:39.430 --> 00:08:41.770
REST-assured is a library,

00:08:41.770 --> 00:08:45.880
you will add it to your pom.xml with the test scope,

00:08:45.880 --> 00:08:50.050
of course, because you
only need it in testing.

00:08:50.050 --> 00:08:56.365
And it uses the Given-When-Then approach so to,

00:08:56.365 --> 00:09:00.955
specify that whenever
certain condition occurs,

00:09:00.955 --> 00:09:04.090
this is the consequence that we expect.

00:09:04.090 --> 00:09:07.450
You can also use Hamcrest matchers

00:09:07.450 --> 00:09:10.360
to validate the results
that have been obtained.

00:09:10.360 --> 00:09:12.690
Let's have a look at how this works.

00:09:12.690 --> 00:09:20.015
This is the injection code for
the URL for your tested service.

00:09:20.015 --> 00:09:22.490
Of course, the service
class is specified with

00:09:22.490 --> 00:09:25.744
the @TestHTTPEndpoint annotation.

00:09:25.744 --> 00:09:28.445
We do import both,

00:09:28.445 --> 00:09:36.590
RestAssured.given and
hamcrest is static methods.

00:09:36.590 --> 00:09:40.280
Then in the test code we simply say that

00:09:40.280 --> 00:09:44.825
whenever a get request
is sent to the endpoint,

00:09:44.825 --> 00:09:50.525
we expect the body to
be or to contain hello.

00:09:50.525 --> 00:09:53.885
Or if we are testing a static resource,

00:09:53.885 --> 00:10:01.265
we simply say that whenever we send a get
request to obtain the Static resource,

00:10:01.265 --> 00:10:07.685
then we expect that the body is or
contains this particular string.

00:10:07.685 --> 00:10:10.535
Now in this case,

00:10:10.535 --> 00:10:17.330
we do have 2 different resources
that we are working with,

00:10:17.330 --> 00:10:21.800
one is our microservice instance in test,

00:10:21.800 --> 00:10:23.990
and the other one is a static resource.

00:10:23.990 --> 00:10:25.955
If all the endpoints that are,

00:10:25.955 --> 00:10:28.280
that you are exercising in

00:10:28.280 --> 00:10:32.450
the test case are or belong
to the same microservice.

00:10:32.450 --> 00:10:36.515
You can actually use the @TestHTTPEndpoint annotation

00:10:36.515 --> 00:10:39.260
on the class, on your test class.

00:10:39.260 --> 00:10:42.260
And in that case, you do
not really have to even

00:10:42.260 --> 00:10:46.985
specify what microservice
you are exercising.

00:10:46.985 --> 00:10:53.240
You simply use the get method
of the REST-assured framework

00:10:53.240 --> 00:10:56.705
and it will immediately
figure out that this get

00:10:56.705 --> 00:11:00.395
actually refers to the
class-level annotation.

00:11:00.395 --> 00:11:02.795
Of course, if it's a sub endpoint

00:11:02.795 --> 00:11:06.470
of the top-level endpoint
exposed by your service,

00:11:06.470 --> 00:11:09.995
then you would simply
specify a relative URL here

00:11:09.995 --> 00:11:12.185
and then assert the expectations.

00:11:12.185 --> 00:11:15.020
Your tests will obviously
sometimes need to be

00:11:15.020 --> 00:11:18.095
supplied with some transient dependencies,

00:11:18.095 --> 00:11:20.570
such as a database server.

00:11:20.570 --> 00:11:26.195
Quarkus actually provides a
QuarkusTestResource annotation.

00:11:26.195 --> 00:11:30.710
And when you annotate a test class
with this annotation, Quarkus will

00:11:30.710 --> 00:11:35.165
simply handle the resources
lifecycle completely for you.

00:11:35.165 --> 00:11:37.565
It will instantiate that test resource

00:11:37.565 --> 00:11:41.255
and shut it down once the
tests have completed.

00:11:41.255 --> 00:11:45.215
I can this following example
are MyServiceTest,

00:11:45.215 --> 00:11:47.959
let's say it depends on a Derby Database.

00:11:47.959 --> 00:11:51.590
We simply have to annotate it
with a @QuarkusTestResource,

00:11:51.590 --> 00:11:56.435
pointing to the class called
DerbyDatabaseTestResource.

00:11:56.435 --> 00:12:01.760
This class is one of the available test

00:12:01.760 --> 00:12:03.140
resource extensions or test

00:12:03.140 --> 00:12:06.680
resources services that had
been designed specifically for

00:12:06.680 --> 00:12:10.970
Quarkus and there are others
such as an H2 database

00:12:10.970 --> 00:12:12.830
TestResource and LDAP

00:12:12.830 --> 00:12:15.350
ServerTestResource and even a

00:12:15.350 --> 00:12:18.635
KubernetesMockServerTestResource
which you can send

00:12:18.635 --> 00:12:21.410
resource creation commands to ends on.

00:12:21.410 --> 00:12:24.830
The list of available tests
resources is constantly growing,

00:12:24.830 --> 00:12:29.060
so have a look at the online
documentation to see which ones are

00:12:29.060 --> 00:12:31.310
currently available and
which ones are available

00:12:31.310 --> 00:12:34.625
for your specific version of Quarkus.

00:12:34.625 --> 00:12:39.005
However, if you need to implement
your own test resource,

00:12:39.005 --> 00:12:41.360
you can use the QuarkusTestResource

00:12:41.360 --> 00:12:44.000
LifecycleManager interface and

00:12:44.000 --> 00:12:49.290
implement your own type
of test resource handler.

00:12:50.170 --> 00:12:52.340
As we have already mentioned,

00:12:52.340 --> 00:12:55.190
testing native applications is a little

00:12:55.190 --> 00:12:58.865
bit different from testing
a JVM application.

00:12:58.865 --> 00:13:04.039
Specifically, dependency
injection is not available,

00:13:04.039 --> 00:13:06.230
so we cannot test anything in

00:13:06.230 --> 00:13:10.475
a native application from
within the application itself.

00:13:10.475 --> 00:13:14.060
It functions as a completely
independent application,

00:13:14.060 --> 00:13:18.695
so the only way you can test it
is from without, not from within.

00:13:18.695 --> 00:13:21.770
Send it API requests,

00:13:21.770 --> 00:13:24.230
exercise it's exposed features.

00:13:24.230 --> 00:13:29.600
There's nothing we can do about the
internals without a low level debugger.

00:13:29.600 --> 00:13:33.170
So when you are packaging the application,

00:13:33.170 --> 00:13:34.850
just simply select the native mode,

00:13:34.850 --> 00:13:35.990
we already know that.

00:13:35.990 --> 00:13:39.740
And then once the native
image had finished his work,

00:13:39.740 --> 00:13:41.795
you have a native executable.

00:13:41.795 --> 00:13:47.645
You would annotate the test class with
the @NativeImageTest annotation

00:13:47.645 --> 00:13:52.280
and then whenever you run
the tests in native mode,

00:13:52.280 --> 00:13:58.730
so you would use mvn test
-Pnative to tell it to

00:13:58.730 --> 00:14:03.875
run only the classes that are
annotated with a NativeImageTest.

00:14:03.875 --> 00:14:05.420
Let's move on to the next video,

00:14:05.420 --> 00:14:08.555
which is a guided exercise and we will

00:14:08.555 --> 00:14:13.020
take a look at how to implement
tests in it. See you there.

