WEBVTT

00:00:00.000 --> 00:00:02.670
Let's build a native
application with Quarkus

00:00:02.670 --> 00:00:04.485
now. Starting with lab

00:00:04.485 --> 00:00:06.630
native-build start script,

00:00:06.630 --> 00:00:10.545
we are going to go into the
lab working directory,

00:00:10.545 --> 00:00:15.400
which is DO378/labs/native-build/expense-service/.

00:00:15.400 --> 00:00:19.250
If we look at the application.properties,

00:00:19.250 --> 00:00:24.275
it doesn't yet contain the
settings for the native build.

00:00:24.275 --> 00:00:28.730
We are going to use a containerized native
build to avoid having to install

00:00:28.730 --> 00:00:34.625
Mandrel and tedious configuration
that is associated with that.

00:00:34.625 --> 00:00:37.400
So we are going to add the quarkus.

00:00:37.400 --> 00:00:41.240
native.container-build
property, set it to true.

00:00:41.240 --> 00:00:45.740
Set the native.builder-
image to be mandrel-20

00:00:45.740 --> 00:00:49.850
based on rhel8 from
registry.access.redhat.com

00:00:49.850 --> 00:00:52.760
and we are going to use
the container-runtime of

00:00:52.760 --> 00:00:56.330
podman because that's what
we have got on our workstation.

00:00:56.330 --> 00:01:00.230
So starting the application in dev mode

00:01:00.230 --> 00:01:05.345
first, of course that is not the most
optimal type of running the application.

00:01:05.345 --> 00:01:08.570
It would have been more comparable if we

00:01:08.570 --> 00:01:12.500
built a JAR file and then
started it with java minus jar.

00:01:12.500 --> 00:01:14.300
However, in dev mode,

00:01:14.300 --> 00:01:16.445
just as an illustration,

00:01:16.445 --> 00:01:22.760
Quarkus takes, there we go 1.75 seconds to start,

00:01:22.760 --> 00:01:24.770
which is quite fast.

00:01:24.770 --> 00:01:28.745
And if we have a look at the
memory utilization here,

00:01:28.745 --> 00:01:30.800
the resident set size,

00:01:30.800 --> 00:01:33.440
which is the actual amount
of memory it's occupying,

00:01:33.440 --> 00:01:40.400
is almost half a gigabyte,
so, 469 megabytes.

00:01:40.400 --> 00:01:42.890
If we send the request,

00:01:42.890 --> 00:01:45.170
the response is actually quite good.

00:01:45.170 --> 00:01:48.110
It's less than 30 milliseconds.

00:01:48.110 --> 00:01:52.160
Now, let's stop the container,

00:01:52.160 --> 00:01:57.395
the Java-based container, and let's
re-package this in native mode.

00:01:57.395 --> 00:02:00.830
This is going to take
close to 5 minutes,

00:02:00.830 --> 00:02:07.220
so you can see some
dependencies being downloaded.

00:02:07.220 --> 00:02:10.190
Eventually, you will see that

00:02:10.190 --> 00:02:15.140
the mandrel-20-rhel8:latest
image is being pulled.

00:02:15.140 --> 00:02:17.840
A container is being started

00:02:17.840 --> 00:02:22.010
and then a native image
source jar is being built.

00:02:22.010 --> 00:02:27.380
And a native image from that
jar is being created.

00:02:27.380 --> 00:02:31.729
You will have seen various status reports or

00:02:31.729 --> 00:02:34.940
finally, there is a podman
run command with

00:02:34.940 --> 00:02:38.435
the parameters needed for the
NativeImageBuild to start.

00:02:38.435 --> 00:02:44.090
You will have seen various stage reports
with memory utilization data as well.

00:02:44.090 --> 00:02:48.034
You can see that it is
quite memory intensive.

00:02:48.034 --> 00:02:51.679
It goes up to 8 gigabytes
for our simple application.

00:02:51.679 --> 00:02:56.330
And it does have various
long-lasting stages.

00:02:56.330 --> 00:02:57.900
In total,

00:02:57.900 --> 00:02:59.680
this one wasn't that bad,

00:02:59.680 --> 00:03:01.960
it was just over 2 minutes.

00:03:01.960 --> 00:03:05.020
For the code analysis in the compilation,

00:03:05.020 --> 00:03:07.810
the total augmentation into

00:03:07.810 --> 00:03:11.425
native code took just a little
bit over 3 minutes.

00:03:11.425 --> 00:03:13.795
And the Build was a SUCCESS of

00:03:13.795 --> 00:03:14.545
course.

00:03:14.545 --> 00:03:16.780
If we have a look at the target directory,

00:03:16.780 --> 00:03:19.345
we see there is a runner binary here.

00:03:19.345 --> 00:03:23.095
It's size is 80 megabytes.

00:03:23.095 --> 00:03:27.415
Now that's not how much it's
going to occupy in memory.

00:03:27.415 --> 00:03:29.050
So if we started,

00:03:29.050 --> 00:03:31.210
the first thing we'll see is it starts in

00:03:31.210 --> 00:03:36.655
75 milliseconds as
opposed to 1.75 seconds,

00:03:36.655 --> 00:03:37.900
in Java mode.

00:03:37.900 --> 00:03:40.440
If we have a look at memory utilization,

00:03:40.440 --> 00:03:44.285
it's only occupying 50 megabytes.

00:03:44.285 --> 00:03:47.585
So if we send a curl request,

00:03:47.585 --> 00:03:51.740
we see that the performance
is relatively similar.

00:03:51.740 --> 00:03:53.450
But that is of course,

00:03:53.450 --> 00:03:55.070
with a single request only.

00:03:55.070 --> 00:04:02.135
It would have been beneficial if we made
some sort of a parallel stress test.

00:04:02.135 --> 00:04:05.330
At any rate, we have built
our native application.

00:04:05.330 --> 00:04:09.410
We can now clean up by running lab
native-build finish script,

00:04:09.410 --> 00:04:11.120
and move on to the next video.

00:04:11.120 --> 00:04:12.785
We are going to look at how to build

00:04:12.785 --> 00:04:16.530
containerized native
applications. See you there.

