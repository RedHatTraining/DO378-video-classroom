WEBVTT

00:00:00.000 --> 00:00:02.175
Now that we know how 
to write basic tests,

00:00:02.175 --> 00:00:04.950
let's have a look at 
how to avoid having

00:00:04.950 --> 00:00:09.360
to start external dependencies
and mock them instead.

00:00:09.360 --> 00:00:13.680
There are mock frameworks available

00:00:13.680 --> 00:00:19.530
and it's actually one of the core
concepts with good unit testing.

00:00:19.530 --> 00:00:22.650
Unit testing is about your code.

00:00:22.650 --> 00:00:25.440
It's not about how it integrates
with other components.

00:00:25.440 --> 00:00:30.420
So you should be able to
just provide some sort of

00:00:30.420 --> 00:00:36.150
a fixed functionality whenever it
comes to using external resources

00:00:36.150 --> 00:00:40.905
and knowing what those external
resources provide

00:00:40.905 --> 00:00:44.060
to your code, allows you to more reliably

00:00:44.060 --> 00:00:49.320
predict your code's behavior, should
it behave the way it was supposed to.

00:00:49.450 --> 00:00:55.325
There are several ways of
mocking your resources,

00:00:55.325 --> 00:00:58.505
but generally you provide objects.

00:00:58.505 --> 00:01:02.330
Classes that basically alter

00:01:02.330 --> 00:01:06.440
the behavior of the original
class were it to be used,

00:01:06.440 --> 00:01:07.670
such as, for example,

00:01:07.670 --> 00:01:10.400
a datastore returning always

00:01:10.400 --> 00:01:13.610
the same value regardless of what
parameters it will be called. Where as

00:01:13.610 --> 00:01:18.660
in fact, a real datastore would have
contacted a database and made a query.

00:01:18.730 --> 00:01:25.970
We would generally use
CDI annotations to load

00:01:25.970 --> 00:01:28.490
the mocked objects with

00:01:28.490 --> 00:01:32.900
a higher priority than the
original ones at testing time.

00:01:32.900 --> 00:01:34.655
Such as for example,

00:01:34.655 --> 00:01:39.799
marking implementation of a mock
with an @Alternative annotation,

00:01:39.799 --> 00:01:43.910
setting it a higher priority and
making it a dependent bean of

00:01:43.910 --> 00:01:47.240
the injection point class in order to

00:01:47.240 --> 00:01:52.010
ensure that it is disposed off
whenever it's not needed anymore.

00:01:52.010 --> 00:01:57.140
Quarkus actually uses CDI to combine

00:01:57.140 --> 00:01:59.990
these 3 annotations
into 1 and provides us

00:01:59.990 --> 00:02:03.470
a stereotype annotation called Mock.

00:02:03.470 --> 00:02:05.555
It's io.quarkus.test.Mock.

00:02:05.555 --> 00:02:08.465
Literally it is a
combination of @Alternative,

00:02:08.465 --> 00:02:10.595
@Dependent and @Priority of 1,

00:02:10.595 --> 00:02:14.300
which gives the class the highest
priority among all available classes.

00:02:14.300 --> 00:02:16.415
And wherever it can be injected,

00:02:16.415 --> 00:02:19.850
that alternative will be used
instead of the real one.

00:02:19.850 --> 00:02:23.690
So to implement actual mocks,

00:02:23.690 --> 00:02:25.700
you need to create the class in

00:02:25.700 --> 00:02:29.300
the src/test/java
subdirectory of your project,

00:02:29.300 --> 00:02:31.895
obviously because you only
want to use it in testing.

00:02:31.895 --> 00:02:37.020
And in addition to
annotating it with mock,

00:02:37.480 --> 00:02:41.180
you can also annotate it with

00:02:41.180 --> 00:02:45.770
a desired specific scope
annotation instead of dependent.

00:02:45.770 --> 00:02:47.465
An example code,

00:02:47.465 --> 00:02:50.405
let's say we have a
datastore object which

00:02:50.405 --> 00:02:53.465
has a method retrieve, we want to mock it,

00:02:53.465 --> 00:02:56.795
so we create a DataStoreMock
which extends it.

00:02:56.795 --> 00:02:59.765
We annotate it with the @Mock
annotation and we simply

00:02:59.765 --> 00:03:02.915
override the methods that we want to mock.

00:03:02.915 --> 00:03:04.760
You can see here that regardless of

00:03:04.760 --> 00:03:07.625
what parameter the retrieve
method is invoked with,

00:03:07.625 --> 00:03:13.205
it will always return
the same new resource.

00:03:13.205 --> 00:03:16.850
Then how we can use it in
the test is even simpler.

00:03:16.850 --> 00:03:20.780
We simply inject a datastore
as if we would have anyway

00:03:20.780 --> 00:03:25.595
and we can now rely because
we have used the @Mock annotation,

00:03:25.595 --> 00:03:28.340
we can rely on the fact
that this alternative

00:03:28.340 --> 00:03:31.190
will be injected into
this injection point

00:03:31.190 --> 00:03:36.470
and of course, then also
used in the test code.

00:03:36.470 --> 00:03:40.175
@Mock annotation is simple enough to use,

00:03:40.175 --> 00:03:45.140
but if many tests require
different mocks for the same bean,

00:03:45.140 --> 00:03:48.470
then unfortunately the approach

00:03:48.470 --> 00:03:52.175
can become difficult to maintain
because it's really difficult to

00:03:52.175 --> 00:03:55.340
have multiple implementations at

00:03:55.340 --> 00:03:57.170
the same time that behave

00:03:57.170 --> 00:04:00.410
differently depending on where
they are called from, right?

00:04:00.410 --> 00:04:04.070
So Mockito actually helps us achieve

00:04:04.070 --> 00:04:06.920
those different behaviors
depending on the context

00:04:06.920 --> 00:04:10.700
because we no longer create a
separate class and load it,

00:04:10.700 --> 00:04:15.815
we actually simply override behavior
wherever we need to override it.

00:04:15.815 --> 00:04:17.810
The main goal of Mockito is basically to

00:04:17.810 --> 00:04:20.360
provide a simple way of writing mocks.

00:04:20.360 --> 00:04:25.145
Mocks that are readable have clean
verification errors when they fail,

00:04:25.145 --> 00:04:31.520
and even provide the minimal API for
building stubs and verifications.

00:04:31.520 --> 00:04:32.750
You simply need to add

00:04:32.750 --> 00:04:40.820
the quarkus-junit5-mockito extension to
your project and use the Mockito class

00:04:40.820 --> 00:04:45.305
with several static methods
that you can use to simplify

00:04:45.305 --> 00:04:51.155
the mock to configure
its desired behavior.

00:04:51.155 --> 00:04:56.450
Just like RESTAssured Mockito
uses a when, then structure.

00:04:56.450 --> 00:05:00.095
So first, if we look at the code sample,

00:05:00.095 --> 00:05:05.480
we create a mock of a datastore
in the test method by

00:05:05.480 --> 00:05:07.520
invoking the mock method with

00:05:07.520 --> 00:05:11.420
the class signature or
class type as a parameter,

00:05:11.420 --> 00:05:15.110
then we configure it's desired
behavior saying that

00:05:15.110 --> 00:05:19.880
whenever somebody invokes the datastore.retrieve method with the uuid,

00:05:19.880 --> 00:05:23.025
what should be returned
is a new Data object with

00:05:23.025 --> 00:05:26.315
the following parameters, and
this will just simply override

00:05:26.315 --> 00:05:31.265
whatever behavior would have been already
implemented in the Datastore.class.

00:05:31.265 --> 00:05:33.320
Similarly, we can use,

00:05:33.320 --> 00:05:36.395
for example, Throw methods not return.

00:05:36.395 --> 00:05:41.435
If somebody retrieves an
object with a null uuid,

00:05:41.435 --> 00:05:44.375
then we will Throw a
NullPointerException here.

00:05:44.375 --> 00:05:48.350
Then there are other additional methods
that you can use such as for example,

00:05:48.350 --> 00:05:51.185
thenAnswer, thenCallRealMethod

00:05:51.185 --> 00:05:54.875
and if you do not provide
a stub definition,

00:05:54.875 --> 00:05:57.560
Mockito will just simply
return the default value.

00:05:57.560 --> 00:06:00.695
So you are literally, 
you do not have to

00:06:00.695 --> 00:06:05.225
override the entire set
of methods in the mock class.

00:06:05.225 --> 00:06:10.145
If you do not, then a default value will
simply be false for boolean type,

00:06:10.145 --> 00:06:12.170
null for general objects,

00:06:12.170 --> 00:06:16.250
an emptyString or 0 for integers.

00:06:16.250 --> 00:06:19.100
And of course, if there's
a collection involved,

00:06:19.100 --> 00:06:21.185
it would have been returned empty.

00:06:21.185 --> 00:06:27.095
If you need to provide behavior
for a broader set of input values,

00:06:27.095 --> 00:06:30.380
then you can use argument matchers.

00:06:30.380 --> 00:06:33.020
Mockito provides argument
matchers such as,

00:06:33.020 --> 00:06:35.390
for example, anyString,

00:06:35.390 --> 00:06:38.570
anyList, anyIterable, anyInt,

00:06:38.570 --> 00:06:43.085
anyCollectionOf, or the
most generic one, any.

00:06:43.085 --> 00:06:47.375
It will just simply match any
parameter regardless of its value.

00:06:47.375 --> 00:06:50.780
So for example, if we
always wanted 

00:06:50.780 --> 00:06:54.455
the datastore to
return the same data object,

00:06:54.455 --> 00:06:57.215
regardless of what parameters it was called with,

00:06:57.215 --> 00:07:01.745
we would simply say
configure the DataStore,

00:07:01.745 --> 00:07:06.620
mock such that whenever anyone calls
retrieve method with any parameter,

00:07:06.620 --> 00:07:11.270
simply return this
particular piece of data.

00:07:11.270 --> 00:07:15.410
Instead of creating a mock
explicitly, an instance of a mock

00:07:15.410 --> 00:07:17.885
by calling Mockito.mock,

00:07:17.885 --> 00:07:21.050
you can simply define the
field in the test class

00:07:21.050 --> 00:07:24.665
and then inject the mock
using @InjectMock annotation

00:07:24.665 --> 00:07:26.660
and then simply configure

00:07:26.660 --> 00:07:31.175
the desired behavior based on
whatever test you need to use it in.

00:07:31.175 --> 00:07:34.580
So you can see that the behaviors can

00:07:34.580 --> 00:07:38.225
be configured independently of each other.

00:07:38.225 --> 00:07:41.690
It is also possible
using Mockito to verify

00:07:41.690 --> 00:07:45.305
that your mocked objects
have actually been invoked.

00:07:45.305 --> 00:07:47.930
And that is not meant to
be used directly with

00:07:47.930 --> 00:07:50.720
direct invocations from your
test code because obviously,

00:07:50.720 --> 00:07:52.820
you see that invocations are there.

00:07:52.820 --> 00:07:57.200
Verifications are useful
for situations where,

00:07:57.200 --> 00:08:00.050
let's say you invoke web services

00:08:00.050 --> 00:08:06.649
endpoint and that web service is expected
to invoke a database operation.

00:08:06.649 --> 00:08:11.180
Now instead of providing it
with just a mock object,

00:08:11.180 --> 00:08:13.520
you can provide it with an object that is

00:08:13.520 --> 00:08:17.090
designed to perform
accounting of some sort.

00:08:17.090 --> 00:08:22.745
And then you simply invoke the end
point of the web service and ask the,

00:08:22.745 --> 00:08:25.145
accounting sort of

00:08:25.145 --> 00:08:30.120
mock whether an operation has
actually been performed or not.

00:08:30.790 --> 00:08:36.240
The method we would use
is Mockito.verify

00:08:37.030 --> 00:08:40.640
and it's typically used
at the end of a test.

00:08:40.640 --> 00:08:44.329
What this method does is it receives

00:08:44.329 --> 00:08:46.730
a mocked object and

00:08:46.730 --> 00:08:52.190
returns an object that actually
shares the interface of the mock.

00:08:52.190 --> 00:08:58.220
Except that the logic this
object executes is dependent on

00:08:58.220 --> 00:09:04.415
whether a method is called and if
specified how many times it was called.

00:09:04.415 --> 00:09:10.160
And you have certain static
methods that you can use to

00:09:10.160 --> 00:09:17.010
configure what is the allowable number
of invocations for a verified object?

00:09:17.320 --> 00:09:20.555
In the code example here,

00:09:20.555 --> 00:09:24.110
these static methods have
already been imported.

00:09:24.110 --> 00:09:27.650
And then we verify, for example,

00:09:27.650 --> 00:09:33.755
that the dataStore's get method
has been invoked exactly 1 times.

00:09:33.755 --> 00:09:35.435
We invoke it once more,

00:09:35.435 --> 00:09:37.775
and then we verify that it's been invoked

00:09:37.775 --> 00:09:40.970
exactly 2 times or atMost 2 times

00:09:40.970 --> 00:09:45.275
and that the get with the parameter
of one has never been invoked.

00:09:45.275 --> 00:09:47.840
If a specific verification fails,

00:09:47.840 --> 00:09:49.700
then an exception is raised,

00:09:49.700 --> 00:09:56.075
one that is a member of org.mockito.exceptions.verification package.

00:09:56.075 --> 00:10:00.485
So it's relatively easy to figure out

00:10:00.485 --> 00:10:05.405
what exactly the problem was upon
receiving the exception.

00:10:05.405 --> 00:10:07.970
Mockito has recently added support to

00:10:07.970 --> 00:10:10.520
mocking static methods of classes as well,

00:10:10.520 --> 00:10:13.505
not just methods on object instances.

00:10:13.505 --> 00:10:21.695
Now, the use of Mockito still allows
you to mock also the Panache.

00:10:21.695 --> 00:10:24.875
For example, ActiveRecord
methods which are all static.

00:10:24.875 --> 00:10:29.510
But there is already also a PanacheMock object,

00:10:29.510 --> 00:10:32.300
which is still the simplest way of

00:10:32.300 --> 00:10:36.830
using Panache classes and it's
static methods in your test.

00:10:36.830 --> 00:10:38.630
What you do need is to add

00:10:38.630 --> 00:10:43.100
the quarkus-panache-mock
extension to your pom.xml file

00:10:43.100 --> 00:10:49.145
and then use the class exactly
as you would use Mockito's

00:10:49.145 --> 00:10:54.185
mock, except that you will use
PanacheMock.mock methods.

00:10:54.185 --> 00:10:58.640
You can create the stubs for mocked class using

00:10:58.640 --> 00:11:04.520
Mockito like you would normally
do on the received mock object,

00:11:04.520 --> 00:11:06.710
such as in this example.

00:11:06.710 --> 00:11:08.900
So instead of Mockito.mock,

00:11:08.900 --> 00:11:12.185
we simply invoke PanacheMock.mock

00:11:12.185 --> 00:11:14.555
assuming that Data.class is

00:11:14.555 --> 00:11:17.315
an instance of a Panache entity.

00:11:17.315 --> 00:11:18.860
And then we simply say, okay!

00:11:18.860 --> 00:11:23.480
whenever somebody invokes a find method
searching for the name of Joseph,

00:11:23.480 --> 00:11:26.990
then simply always return
this particular object.

00:11:26.990 --> 00:11:31.730
Or if and then we essentially exercise the

00:11:31.730 --> 00:11:36.710
configured mock and assert that
the result is what we have expected.

00:11:36.710 --> 00:11:39.020
Let's see how this all works in practice,

00:11:39.020 --> 00:11:40.325
join us in the next video,

00:11:40.325 --> 00:11:43.050
which is the exercise.

