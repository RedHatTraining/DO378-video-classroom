WEBVTT

00:00:00.000 --> 00:00:02.205
All right! Welcome back!

00:00:02.205 --> 00:00:04.620
Let's have a look at how to containerize

00:00:04.620 --> 00:00:07.350
natively built Quarkus application. We will

00:00:07.350 --> 00:00:10.320
start with the lab native-
container start script,

00:00:10.320 --> 00:00:14.310
which downloads the exercise
files and solution files,

00:00:14.310 --> 00:00:15.780
which aren't really many.

00:00:15.780 --> 00:00:19.590
Because what we will be doing is
simply logging into OpenShift,

00:00:19.590 --> 00:00:23.880
so we will be sourcing our
ocp4.config file and

00:00:23.880 --> 00:00:28.470
then using the variables inside
it to log into OpenShift.

00:00:28.470 --> 00:00:32.204
We are also going to create a new-
project called native-container

00:00:32.204 --> 00:00:36.720
and suffix by your username. There we go.

00:00:36.720 --> 00:00:39.530
And once it's been created,

00:00:39.530 --> 00:00:43.865
we are going to first deploy a Java application.

00:00:43.865 --> 00:00:49.910
So we are going to use
oc new-app, point to

00:00:49.910 --> 00:00:57.845
the Git repository on github.com/redhattraining/DO378-apps,

00:00:57.845 --> 00:01:00.740
in the branch of 1.11.

00:01:00.740 --> 00:01:04.310
The subdirectory is going
to be the expenses service,

00:01:04.310 --> 00:01:08.000
the familiar service we have used
in the previous exercise as well.

00:01:08.000 --> 00:01:11.615
So that's the sub-directory
that is going to get built.

00:01:11.615 --> 00:01:15.950
And we are going to use the
base image of /ubi8/

00:01:15.950 --> 00:01:21.030
openjdk-11 from registry.access.redhat.com.

00:01:21.030 --> 00:01:24.940
The character between the image name on

00:01:24.940 --> 00:01:26.650
the left-hand side and

00:01:26.650 --> 00:01:31.030
the source code repository URL on the
right-hand side is a tilde character,

00:01:31.030 --> 00:01:33.610
so the curly character,

00:01:33.610 --> 00:01:35.245
it's not a minus,

00:01:35.245 --> 00:01:38.695
so be careful of that.

00:01:38.695 --> 00:01:42.790
What OpenShift then does is
it creates 2 image streams.

00:01:42.790 --> 00:01:43.990
One for the base image,

00:01:43.990 --> 00:01:47.500
one for the application image
to be pushed into, build

00:01:47.500 --> 00:01:49.540
configuration, a deployment

00:01:49.540 --> 00:01:51.250
to run the app and of course,

00:01:51.250 --> 00:01:53.410
the service to be able to access it

00:01:53.410 --> 00:01:56.545
from within the OpenShift
Container Platform.

00:01:56.545 --> 00:01:59.289
It also starts a build immediately,

00:01:59.289 --> 00:02:01.345
which we can tail the logs of.

00:02:01.345 --> 00:02:04.775
So we can see it's cloning the source code

00:02:04.775 --> 00:02:09.990
and then starting the build
using the base image.

00:02:10.000 --> 00:02:13.880
It generates quite a lot of logs,

00:02:13.880 --> 00:02:21.575
what we will be looking for
is actually the time,

00:02:21.575 --> 00:02:24.380
the point in time when
the build has completed,

00:02:24.380 --> 00:02:28.669
just to make sure that
the build logs complete

00:02:28.669 --> 00:02:32.900
or finish with the successful push
to the internal image registry.

00:02:32.900 --> 00:02:35.435
We do have a pod running already.

00:02:35.435 --> 00:02:37.490
The application pod that is,

00:02:37.490 --> 00:02:40.730
it's been running for 9
seconds by this point.

00:02:40.730 --> 00:02:44.765
We will be looking at this
application logs as well.

00:02:44.765 --> 00:02:48.485
So using oc logs with the name of the pod,

00:02:48.485 --> 00:02:54.305
we can see that the startup time for
this pod was 1.5 seconds, just under.

00:02:54.305 --> 00:02:56.900
And if we want to test it,

00:02:56.900 --> 00:02:58.595
we first have to create a route.

00:02:58.595 --> 00:03:02.495
So we will expose the service
called jvm-expenses.

00:03:02.495 --> 00:03:05.555
We get a host name and if we send

00:03:05.555 --> 00:03:10.565
a get request to that host name with
the endpoint of /expenses,

00:03:10.565 --> 00:03:13.295
there is our expense report.

00:03:13.295 --> 00:03:16.595
Right? Let's now switch to a native build.

00:03:16.595 --> 00:03:19.835
We are going to reuse the
oc new-app command

00:03:19.835 --> 00:03:24.110
but this time we are using the
same source code location,

00:03:24.110 --> 00:03:26.990
but we are using a different base image.

00:03:26.990 --> 00:03:31.115
I will be using quay.io/quarkus/ubi-quarkus-native-

00:03:31.115 --> 00:03:35.900
s2i with the version
tag of 20.3.3.

00:03:35.900 --> 00:03:40.039
We are going to call the new
application native-expenses.

00:03:40.039 --> 00:03:42.740
And oc new-app again

00:03:42.740 --> 00:03:46.565
creates 2 image streams, one for
the base image, one for

00:03:46.565 --> 00:03:49.040
the application image to be pushed to,

00:03:49.040 --> 00:03:54.485
a build configuration, a deployment
to run the app and a service.

00:03:54.485 --> 00:03:57.260
What we will do is immediately cancel the

00:03:57.260 --> 00:04:00.500
automatically created build
because as we all know,

00:04:00.500 --> 00:04:04.850
the native builds are extremely
memory in CPU intense,

00:04:04.850 --> 00:04:12.510
so the OpenShift controllers will
actually terminate the pod

00:04:12.670 --> 00:04:17.390
on account that it would just use
excessive resources on the node.

00:04:17.390 --> 00:04:18.995
So what we will do is first,

00:04:18.995 --> 00:04:22.565
we are going to add some
resource limits to it,

00:04:22.565 --> 00:04:27.770
namely 4 cpu cores and
3.5 gigabytes of memory.

00:04:27.770 --> 00:04:30.050
This will make the build
a little bit longer,

00:04:30.050 --> 00:04:33.110
but it will ensure that
it actually finishes.

00:04:33.110 --> 00:04:40.350
So then we can start the build
and wait for it to complete.

00:04:40.450 --> 00:04:44.045
There is quite a lot of logs produced here.

00:04:44.045 --> 00:04:46.775
But eventually we do get the report,

00:04:46.775 --> 00:04:49.160
the breakdown of various phases.

00:04:49.160 --> 00:04:52.820
We can see it completed in
a total of 2 minutes,

00:04:52.820 --> 00:04:54.530
which is not bad at all.

00:04:54.530 --> 00:05:02.270
And the image was again built and pushed
into the internal image registry.

00:05:02.270 --> 00:05:04.670
If we have a look at the pods, of course,

00:05:04.670 --> 00:05:06.020
we have to wait for

00:05:06.020 --> 00:05:11.630
the new native expenses application pod
to finish starting up. There we are.

00:05:11.630 --> 00:05:15.500
It's now running. If we
have a look at the logs,

00:05:15.500 --> 00:05:17.750
we can see that Quarkus started up in

00:05:17.750 --> 00:05:22.685
20 milliseconds as a vast
improvement over the previous one.

00:05:22.685 --> 00:05:26.780
If we expose the service native-expenses 
to get a host name,

00:05:26.780 --> 00:05:31.655
to connect to sending a curl
request to that host name,

00:05:31.655 --> 00:05:36.230
we get our good old expense report.

00:05:36.230 --> 00:05:40.520
That concludes the exercise and at
the same time, the chapter.

00:05:40.520 --> 00:05:43.565
So let's just run the lab native-container finish script,

00:05:43.565 --> 00:05:46.265
and move on to the next
chapter where we discuss

00:05:46.265 --> 00:05:50.040
testing Quarkus applications.
See you there.

