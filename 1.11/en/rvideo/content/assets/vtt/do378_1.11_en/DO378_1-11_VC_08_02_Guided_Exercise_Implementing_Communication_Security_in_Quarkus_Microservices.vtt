WEBVTT

00:00:00.000 --> 00:00:05.760
In this exercise, we are going to
implement both one way and mutual TLS.

00:00:05.760 --> 00:00:09.300
But first we're going to
look at some CORS settings.

00:00:09.300 --> 00:00:14.595
So let's set everything up first by
running lab secure-tls start script.

00:00:14.595 --> 00:00:20.835
This deploys the
multi-component equation solver

00:00:20.835 --> 00:00:26.250
with the solver project, multiplier
and the adder microservices in DO378/

00:00:26.250 --> 00:00:30.105
labs/secure-tls/ directory.

00:00:30.105 --> 00:00:32.955
We have a look at the
other artifacts here.

00:00:32.955 --> 00:00:37.570
We have a startup script that
starts all the services up

00:00:37.570 --> 00:00:44.675
and waits for a ENTER to be
pressed before it Terminates.

00:00:44.675 --> 00:00:48.695
We have some additional
certificate management scripts

00:00:48.695 --> 00:00:51.230
that we will be using
throughout the exercise.

00:00:51.230 --> 00:00:53.945
And then there's an index.html file,

00:00:53.945 --> 00:00:58.160
which is actually the frontend
to the solver application.

00:00:58.160 --> 00:01:00.740
So let's run the start script first,

00:01:00.740 --> 00:01:04.970
that starts all the three components up.

00:01:04.970 --> 00:01:10.350
And once everything starts up,

00:01:11.050 --> 00:01:14.120
we will go over to

00:01:14.120 --> 00:01:17.210
another terminal window because the
first one is blocked and have a look at

00:01:17.210 --> 00:01:24.005
the index.html file that is the frontend 
to the Quarkus Solver application.

00:01:24.005 --> 00:01:28.970
In addition to having some cascading
style sheets in the header,

00:01:28.970 --> 00:01:32.765
we can see that it's a
jquery application and that

00:01:32.765 --> 00:01:41.735
it actually loads or has a
function called solveForm

00:01:41.735 --> 00:01:48.679
that upon clicking of the
button to submit the equation,

00:01:48.679 --> 00:01:54.050
sends the term literally to the
localhost 8080 endpoint solver,

00:01:54.050 --> 00:01:57.290
which is where the solver
applications is actually waiting.

00:01:57.290 --> 00:02:02.165
Now, let's have a look at how that works.

00:02:02.165 --> 00:02:05.255
Opening it in a browser window,

00:02:05.255 --> 00:02:09.785
entering the equation and
clicking Solve, we get an ERROR.

00:02:09.785 --> 00:02:11.870
It says failed to connect to servers.

00:02:11.870 --> 00:02:16.820
So if we press F 12 or we
go to the menu and select

00:02:16.820 --> 00:02:22.370
Developer Tools and open
the Web Developer Console,

00:02:22.370 --> 00:02:25.250
we can see that in the
Console tab there is

00:02:25.250 --> 00:02:32.150
a Cross-Origin Request Blocked error that
reports that, The Same Origin Policy

00:02:32.150 --> 00:02:36.424
disallows reading the remote
resource at localhost:8080

00:02:36.424 --> 00:02:41.795
because the course control allow origin
header is missing from the server.

00:02:41.795 --> 00:02:46.265
So the browser is refusing
to work with the server.

00:02:46.265 --> 00:02:51.095
The server is actually
blocking the communication.

00:02:51.095 --> 00:02:56.300
What we are going to do next
is in the solver application,

00:02:56.300 --> 00:02:59.345
we are going to change the
application.properties file,

00:02:59.345 --> 00:03:03.905
and we will simply add 
quarkus.http.cors set to true.

00:03:03.905 --> 00:03:11.135
Repeating that operation we will get
the Result of 23, which is correct.

00:03:11.135 --> 00:03:14.765
So we have solved the CORS problem.

00:03:14.765 --> 00:03:19.460
Now, let's go ahead and
generate some keys.

00:03:19.460 --> 00:03:25.310
The genkeys script is actually script that
will generate key stores for all 3

00:03:25.310 --> 00:03:30.680
microservices. We will only be protecting
the solver application using TLS now.

00:03:30.680 --> 00:03:33.770
So we will use the other 2

00:03:33.770 --> 00:03:36.095
keystores created by this script later.

00:03:36.095 --> 00:03:40.175
But let's run the script
getting 3 keystores

00:03:40.175 --> 00:03:46.550
and configure the solvers application.properties to allow us to use HTTPS.

00:03:46.550 --> 00:03:49.085
What we are adding is 3 options,

00:03:49.085 --> 00:03:53.795
quarkus.http.ssl-port set to 8443,

00:03:53.795 --> 00:03:56.810
and then quarkus.http.ssl

00:03:56.810 --> 00:04:00.980
certificate.key-store-file set
to solver.keystore

00:04:00.980 --> 00:04:02.570
this is where the script put it

00:04:02.570 --> 00:04:07.820
at the base directory in the project,
next to pom.xml for example.

00:04:07.820 --> 00:04:12.680
And because the application is
executed from the target directory,

00:04:12.680 --> 00:04:15.200
we need to point to one level up

00:04:15.200 --> 00:04:18.425
to be able to load it from the
file system while it's running.

00:04:18.425 --> 00:04:22.520
Also, the certificate.key-store-password 
is set to

00:04:22.520 --> 00:04:24.650
redhat such that the keystore

00:04:24.650 --> 00:04:27.530
can be unlocked and the
certificate can be loaded.

00:04:27.530 --> 00:04:28.759
Right!

00:04:28.759 --> 00:04:33.695
We have configured the solver to
allow secure communications.

00:04:33.695 --> 00:04:35.090
So if we restart

00:04:35.090 --> 00:04:45.270
all the applications and go
over to the other terminal,

00:04:45.280 --> 00:04:48.755
I was a little bit early here,

00:04:48.755 --> 00:04:53.390
if we go and send an https request

00:04:53.390 --> 00:04:57.785
to port 8443 with an
equation in the expression,

00:04:57.785 --> 00:04:59.960
curl does complain that it is

00:04:59.960 --> 00:05:02.690
a self signed certificate
that the server returns.

00:05:02.690 --> 00:05:09.080
But if we get beyond this problem
and invoke curl with -k,

00:05:09.080 --> 00:05:16.025
we do get a response from port
8443 using the https protocol.

00:05:16.025 --> 00:05:19.880
If we have a look at the
certificate details,

00:05:19.880 --> 00:05:24.410
we can see that the subject is here,

00:05:24.410 --> 00:05:27.395
the issuer is also here

00:05:27.395 --> 00:05:33.155
and the HTTPS session was established.

00:05:33.155 --> 00:05:34.145
There we go.

00:05:34.145 --> 00:05:38.600
Alright. Now let us configure mutual TLS,

00:05:38.600 --> 00:05:42.635
because now we are just talking to the
solver application using SSL, right?

00:05:42.635 --> 00:05:46.595
But the internal communication between
the microservices is still plain text.

00:05:46.595 --> 00:05:48.170
So we are going to use

00:05:48.170 --> 00:05:51.410
the script number 2 export-certs

00:05:51.410 --> 00:05:54.965
to export the certificates
from the keystore

00:05:54.965 --> 00:05:58.250
and that's what it does basically.

00:05:58.250 --> 00:06:02.180
Then we are going to use the script 3,

00:06:02.180 --> 00:06:04.070
gentrust to use

00:06:04.070 --> 00:06:06.185
the just exported certificates to

00:06:06.185 --> 00:06:08.810
create trust stores for
each of those services.

00:06:08.810 --> 00:06:13.400
Now, remember that in terms
of communication paths,

00:06:13.400 --> 00:06:17.495
solver needs to be able to communicate
to both adder and multiplier,

00:06:17.495 --> 00:06:21.275
whereas the other 2 only need to
be able to communicate to solver.

00:06:21.275 --> 00:06:25.140
So that's why the gentrust script

00:06:25.630 --> 00:06:29.975
imports the adder certificate
into solver trust store,

00:06:29.975 --> 00:06:33.125
the multiplier certificate
into solver trust store,

00:06:33.125 --> 00:06:38.645
and then the solver certificate into
adders and multipliers trust store.

00:06:38.645 --> 00:06:41.960
When we run it, it actually configures

00:06:41.960 --> 00:06:49.520
those files with the password of
redhat for all of them, of course.

00:06:49.520 --> 00:06:52.460
Now if we configure the solvers

00:06:52.460 --> 00:06:57.210
application.properties
first, to enable mutual TLS,

00:06:57.580 --> 00:07:00.410
we can see that first of all,

00:07:00.410 --> 00:07:03.890
the AdderService configuration
was switched from plain text on

00:07:03.890 --> 00:07:07.520
port 8081 to https on port 8444.

00:07:07.520 --> 00:07:13.550
We have added the trustStore
for the client to the AdderService,

00:07:13.550 --> 00:07:15.320
to the solver.truststore

00:07:15.320 --> 00:07:17.434
which contains the adder certificate.

00:07:17.434 --> 00:07:22.970
And we have also added the
keystore for the adder client to

00:07:22.970 --> 00:07:29.120
present the solvers certificate to the
AdderService whenever you connect.

00:07:29.120 --> 00:07:31.370
Same for the MultiplierService,

00:07:31.370 --> 00:07:37.580
we reconfigure it from plain text on
port 8082 to https on port 8445

00:07:37.580 --> 00:07:40.235
and we have enabled the
truststore and keystore

00:07:40.235 --> 00:07:44.060
for the MultiplierService client as well.

00:07:44.060 --> 00:07:54.860
What we also had to add was, so the
key-store configuration was already there,

00:07:54.860 --> 00:07:58.550
the key-store file and the password word is

00:07:58.550 --> 00:08:03.454
specified from the previous
step in the exercise.

00:08:03.454 --> 00:08:08.825
But what we had to add was the
trust-store configuration.

00:08:08.825 --> 00:08:13.565
So and the fact that the client
authentication is now required.

00:08:13.565 --> 00:08:16.759
So if anyone contacts
the sovler on port 8443,

00:08:16.759 --> 00:08:19.100
they will have to provide
their certificate.

00:08:19.100 --> 00:08:23.030
We are going to do the same
only in a little bit of

00:08:23.030 --> 00:08:27.890
a smaller extent to the
adder microservice.

00:08:27.890 --> 00:08:32.210
So we will be basically adding
the configuration for

00:08:32.210 --> 00:08:38.014
the solver client using the adder.truststore and the adder.keystore

00:08:38.014 --> 00:08:40.940
for the client to be able to trust

00:08:40.940 --> 00:08:45.575
the solver and to be able
to present the adders

00:08:45.575 --> 00:08:51.620
public key. We are also
configuring ssl on port 8444

00:08:51.620 --> 00:08:56.510
and of course, as far as the
server-side of the adder is concerned,

00:08:56.510 --> 00:08:58.100
not where it's acting as a client,

00:08:58.100 --> 00:08:59.780
but where it's acting as a server,

00:08:59.780 --> 00:09:03.230
the situation is the same.

00:09:03.230 --> 00:09:06.050
So we set up a key-store
file and a trust-store file

00:09:06.050 --> 00:09:10.655
and we require client authentication

00:09:10.655 --> 00:09:15.140
and disable any sort of
plain text requests.

00:09:15.140 --> 00:09:19.715
The same configuration steps are
then performed to the multiplier.

00:09:19.715 --> 00:09:22.850
So we switch from port 8080 to 8443,

00:09:22.850 --> 00:09:27.260
configure the key-store and trust-store
for the solver client,

00:09:27.260 --> 00:09:31.115
switch the ssl.port to 8445

00:09:31.115 --> 00:09:36.770
and configure the key-store and trust-store for the server on port 8445,

00:09:36.770 --> 00:09:42.590
requiring client authentication and
disabling any plain text requests.

00:09:42.590 --> 00:09:46.354
So we are now restarting the services

00:09:46.354 --> 00:09:48.800
as they start up.

00:09:48.800 --> 00:09:58.850
You can switch back to the next tab
and have a look at what's going on

00:09:58.850 --> 00:10:03.455
if we send an https request to solver.

00:10:03.455 --> 00:10:08.285
We get a response saying there's an error.

00:10:08.285 --> 00:10:11.210
I'm sorry, but you provided
a bad certificate.

00:10:11.210 --> 00:10:15.515
This is because right now with
this change of configuration,

00:10:15.515 --> 00:10:17.869
solver requires us to authenticate

00:10:17.869 --> 00:10:20.870
using an SSL certificate
on port 8443

00:10:20.870 --> 00:10:25.970
and that is also why we
left port 8080 open,

00:10:25.970 --> 00:10:28.580
but only on the solver
microservice, right?

00:10:28.580 --> 00:10:35.315
So if we connect on port 8080
using http protocol, not https,

00:10:35.315 --> 00:10:41.975
we do get a response which proves
that the solver microservice is

00:10:41.975 --> 00:10:45.110
successfully communicating
to both multiplier

00:10:45.110 --> 00:10:48.499
and adder using mutual TLS authentication.

00:10:48.499 --> 00:10:52.820
And because those two
recursively invoke solver back,

00:10:52.820 --> 00:10:56.150
we have proved that those two can also use

00:10:56.150 --> 00:10:59.315
mutual TLS authentication with the solver.

00:10:59.315 --> 00:11:01.220
That concludes the exercise.

00:11:01.220 --> 00:11:05.375
So after we run lab secure-tls finish script,

00:11:05.375 --> 00:11:09.230
and potentially also pressing ENTER to

00:11:09.230 --> 00:11:14.880
terminate Quarkuses in the other
window where we were running them.

00:11:14.950 --> 00:11:17.210
This is it, join us

00:11:17.210 --> 00:11:21.090
in the next video, where we are going
to talk about authentication.

