WEBVTT

00:00:00.000 --> 00:00:04.605
Some of the exercises in this course
use a shared OpenShift cluster,

00:00:04.605 --> 00:00:08.145
provided by the
lab infrastructure to

00:00:08.145 --> 00:00:11.775
deploy various applications and test them.

00:00:11.775 --> 00:00:15.780
So what we need to do is
verify the credentials that

00:00:15.780 --> 00:00:20.190
are assigned to our lab
at the lab creation time.

00:00:20.190 --> 00:00:23.730
If you look at your lab overview page,

00:00:23.730 --> 00:00:28.125
so switch to the lab environment tab
and then scroll down just a little bit.

00:00:28.125 --> 00:00:30.645
You'll be able to see a
section called OpenShift

00:00:30.645 --> 00:00:33.089
Details. This section

00:00:33.089 --> 00:00:37.350
consists of 4 important bits
of information, actually 3.

00:00:37.350 --> 00:00:39.930
First of all, the developer user,

00:00:39.930 --> 00:00:42.024
which is randomly generated,

00:00:42.024 --> 00:00:44.810
developer password,
which is random as well,

00:00:44.810 --> 00:00:46.805
and the master API endpoint,

00:00:46.805 --> 00:00:48.170
which is not random at all.

00:00:48.170 --> 00:00:53.960
It should actually be used as
is displayed in the console.

00:00:53.960 --> 00:00:56.720
This is where the OpenShift
cluster can be reached

00:00:56.720 --> 00:01:00.170
and of course, where we can talk to it.

00:01:00.170 --> 00:01:03.680
The web console application
is also publicly available,

00:01:03.680 --> 00:01:07.580
so for those parts of OpenShift
related workflows that you

00:01:07.580 --> 00:01:11.480
need to login to the web console
or to test your application

00:01:11.480 --> 00:01:15.680
even, you do not have to do it in
the workstation virtual machine.

00:01:15.680 --> 00:01:18.080
You can actually use your browsers and

00:01:18.080 --> 00:01:21.545
simply open these links in your browser.

00:01:21.545 --> 00:01:26.960
Now, what we need to do to complete
this exercise is simply run

00:01:26.960 --> 00:01:33.065
a script called lab-configure
in your workstation's terminal window.

00:01:33.065 --> 00:01:36.350
It will ask us for a couple
of bits of information,

00:01:36.350 --> 00:01:39.510
as we said, the API endpoint,

00:01:39.610 --> 00:01:43.640
which most reliably can just simply be

00:01:43.640 --> 00:01:47.675
copied from the webpage and
pasted into the terminal.

00:01:47.675 --> 00:01:50.585
The username you've been assigned with.

00:01:50.585 --> 00:01:54.570
So this randomly generated string,

00:01:55.330 --> 00:02:04.520
the password, which prints

00:02:04.520 --> 00:02:06.725
out as well, and that's it.

00:02:06.725 --> 00:02:11.780
After that, the script proceeds to
checking that the API endpoint is

00:02:11.780 --> 00:02:15.065
available and that all the
infrastructure components

00:02:15.065 --> 00:02:18.710
are present, correctly configured,

00:02:18.710 --> 00:02:22.145
then presents you with a success report.

00:02:22.145 --> 00:02:29.525
Now, the file that it generates
is called /usr/local/etc/

00:02:29.525 --> 00:02:33.180
ocp4.config, so this one.

00:02:34.750 --> 00:02:39.560
And we will be loading this
file regularly before we start

00:02:39.560 --> 00:02:44.600
an exercise because what
its contents are, allow us.

00:02:44.600 --> 00:02:48.140
They're just simple,
5 variables that we

00:02:48.140 --> 00:02:52.145
can use instead of these
randomly generated strings.

00:02:52.145 --> 00:02:54.245
And they're much easier to type

00:02:54.245 --> 00:02:57.260
and the best thing of all is that

00:02:57.260 --> 00:03:01.985
shell tab completion works with
environment variable names.

00:03:01.985 --> 00:03:05.825
It doesn't work with these
randomly generated strings.

00:03:05.825 --> 00:03:10.850
So what we'll be doing is simply
sourcing this script or this is

00:03:10.850 --> 00:03:14.210
an equivalent command at

00:03:14.210 --> 00:03:17.855
the beginning of each exercise that
requires OpenShift connectivity.

00:03:17.855 --> 00:03:23.765
Now if you have an issue reported at
any step during the verification phase,

00:03:23.765 --> 00:03:26.390
it might be due to an
intermittent failures.

00:03:26.390 --> 00:03:28.370
So simply rerun the script.

00:03:28.370 --> 00:03:30.380
When you run it for the next time,

00:03:30.380 --> 00:03:33.560
so when you run it for
the second time or third,

00:03:33.560 --> 00:03:39.245
you do not have to retype or provide
these bits of information all over again.

00:03:39.245 --> 00:03:41.990
Do verify that there is no typo of course,

00:03:41.990 --> 00:03:44.270
but if it's just about repeating

00:03:44.270 --> 00:03:48.710
the verification process, you
can simply press Enter and

00:03:48.710 --> 00:03:50.300
the same values as you provided

00:03:50.300 --> 00:03:54.125
the previous time will be used
for the subsequent attempt.

00:03:54.125 --> 00:03:55.490
Once done,

00:03:55.490 --> 00:03:58.310
that's all you needed
to do in this exercise.

00:03:58.310 --> 00:04:01.760
So join us in the next chapter
where we're going to talk

00:04:01.760 --> 00:04:07.440
about implementing microservices
with Quarkus. See you there.

