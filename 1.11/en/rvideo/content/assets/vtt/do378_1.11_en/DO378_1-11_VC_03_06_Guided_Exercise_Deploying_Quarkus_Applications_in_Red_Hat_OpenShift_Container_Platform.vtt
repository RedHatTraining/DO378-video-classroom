WEBVTT

00:00:00.000 --> 00:00:05.385
In this video, we're going to use our
familiar expense service microservice,

00:00:05.385 --> 00:00:07.875
we are going to deploy to OpenShift.

00:00:07.875 --> 00:00:11.505
So let's just start with the lab
deploy-openshift start script,

00:00:11.505 --> 00:00:14.820
which makes sure that the project
we are going to deploy to is already

00:00:14.820 --> 00:00:18.455
created. After the script finishes,

00:00:18.455 --> 00:00:22.250
I just load our Openshift
configuration from /usr/local/etc/

00:00:22.250 --> 00:00:24.080
ocp4.config file

00:00:24.080 --> 00:00:29.375
and then use the variables to login
to the OpenShift Container Platforms.

00:00:29.375 --> 00:00:33.035
You can see that the project
is automatically selected.

00:00:33.035 --> 00:00:36.615
Make sure this is so for you as well.

00:00:36.615 --> 00:00:41.090
If it isn't, just add or
issue an extra command,

00:00:41.090 --> 00:00:44.015
oc project deploy-openshift,

00:00:44.015 --> 00:00:46.325
RHT_OCP4_DEV_USER,

00:00:46.325 --> 00:00:51.485
make sure this is a variable that is
loaded from the ocp4.config file.

00:00:51.485 --> 00:00:53.330
Now let's go to DO378/

00:00:53.330 --> 00:00:56.645
labs/deploy-openshift/expense-service/

00:00:56.645 --> 00:01:02.034
It's just a plain source
code only directory

00:01:02.034 --> 00:01:06.280
with a pom.xml. We see the
expense data object model,

00:01:06.280 --> 00:01:08.680
the ExpenseResource RESTful Web Service.

00:01:08.680 --> 00:01:11.215
We've got the import SQL here as well,

00:01:11.215 --> 00:01:14.020
just as we've used it in one
of the previous exercises.

00:01:14.020 --> 00:01:15.820
But what we need to do is configure

00:01:15.820 --> 00:01:18.370
this project to be able
to work with OpenShift.

00:01:18.370 --> 00:01:22.690
So what we will add, is the
OpenShift extension,

00:01:22.690 --> 00:01:27.100
using quarkus:add-extension -Dextension
equals openshift.

00:01:27.100 --> 00:01:31.270
We can see that it has been
installed and now let's

00:01:31.270 --> 00:01:35.365
just do a clean package goal.

00:01:35.365 --> 00:01:38.065
We are going to skip tests because

00:01:38.065 --> 00:01:42.430
we know from previous exercises that
the application works correctly.

00:01:42.430 --> 00:01:47.530
But we need to set the Dquarkus.kubernetes.deploy equals true.

00:01:47.530 --> 00:01:51.160
And because we want to test it
immediately after deployment,

00:01:51.160 --> 00:01:53.080
we're also going to set quarkus.

00:01:53.080 --> 00:01:57.265
openshift.expose equals
true to get a route.

00:01:57.265 --> 00:02:00.805
Maven downloads a couple of JAR files,

00:02:00.805 --> 00:02:03.369
generates the code, compiles,

00:02:03.369 --> 00:02:06.459
it, skips the testing,

00:02:06.459 --> 00:02:10.310
and then packages the application.

00:02:11.220 --> 00:02:13.300
So there we go.

00:02:13.300 --> 00:02:18.400
This is the OpenShift
extension kicking in

00:02:18.400 --> 00:02:23.485
and we can see that openshift
target was selected

00:02:23.485 --> 00:02:26.570
because it has the highest
priority and it is being

00:02:26.570 --> 00:02:30.814
detected that the current active
session actually is OpenShift,

00:02:30.814 --> 00:02:38.555
contacts the API server and then
performs the openshift binary build.

00:02:38.555 --> 00:02:40.820
It first applies two image streams,

00:02:40.820 --> 00:02:42.200
1 for the base image,

00:02:42.200 --> 00:02:44.765
1 for the expenses application.

00:02:44.765 --> 00:02:47.780
If we have a look at what in the meantime,

00:02:47.780 --> 00:02:51.410
oc get all tells us, it is going to

00:02:51.410 --> 00:02:55.175
be the two image streams
that we'll see here,

00:02:55.175 --> 00:03:00.740
the expenses image stream and the
openjdk-11 base images image stream.

00:03:00.740 --> 00:03:02.570
After a couple of seconds,

00:03:02.570 --> 00:03:07.175
a build configuration is created
and applied and we can see it here.

00:03:07.175 --> 00:03:09.950
It wasn't there when we used oc get all,

00:03:09.950 --> 00:03:11.765
it only appears,

00:03:11.765 --> 00:03:16.880
once this line appears
in the maven output.

00:03:16.880 --> 00:03:19.880
Then it actually starts to
build in the remainder,

00:03:19.880 --> 00:03:25.790
the majority of the remainder of the
logs is actually OpenShift build logs.

00:03:25.790 --> 00:03:31.730
You can see here container
file build being executed and

00:03:31.730 --> 00:03:38.599
then ultimately some libraries being
copied to the target destination.

00:03:38.599 --> 00:03:42.860
And once that is done,

00:03:42.860 --> 00:03:44.510
the image is pushed into

00:03:44.510 --> 00:03:49.160
the internal OpenShift registry
wherever the image stream points.

00:03:49.160 --> 00:03:55.850
And once push is successful a DeploymentConfig 
is created as you can see here,

00:03:55.850 --> 00:03:59.975
so a service, DeploymentConfig and a route.

00:03:59.975 --> 00:04:06.020
We can see indeed that
once the build completes,

00:04:06.020 --> 00:04:07.940
there are no deployments,

00:04:07.940 --> 00:04:09.905
there is a deployment config though,

00:04:09.905 --> 00:04:12.875
and a replication controller
associated with it.

00:04:12.875 --> 00:04:15.725
And here we have the Completed build pod,

00:04:15.725 --> 00:04:17.630
the completed deployer pod from

00:04:17.630 --> 00:04:21.630
the deployment and the
actual Running application.

00:04:21.910 --> 00:04:26.149
Well, the BUILD reports a SUCCESS.

00:04:26.149 --> 00:04:29.750
If we have a look again at
the state of our project,

00:04:29.750 --> 00:04:31.430
there are 3 pods,

00:04:31.430 --> 00:04:32.480
1 of which is running,

00:04:32.480 --> 00:04:34.325
the other 2 have already completed.

00:04:34.325 --> 00:04:39.455
This is a Kubernetes service
created by the OpenShift extension

00:04:39.455 --> 00:04:43.400
and this is the route that we can
use to access our applications.

00:04:43.400 --> 00:04:45.110
If we test it,

00:04:45.110 --> 00:04:47.480
it just copied the URL or the host name

00:04:47.480 --> 00:04:50.795
into the curl command and
pasted it through jq.

00:04:50.795 --> 00:04:56.870
We can see that the 2 familiar expenses
have already been added to the list.

00:04:56.870 --> 00:04:59.000
Now, let's have a look at

00:04:59.000 --> 00:05:03.245
the Kubernetes resources that
were generated by the extensions.

00:05:03.245 --> 00:05:05.870
There is now a target
directory which contains

00:05:05.870 --> 00:05:09.890
a Kubernetes subdirectory as we
discussed it in the previous lecture.

00:05:09.890 --> 00:05:11.270
And here we have

00:05:11.270 --> 00:05:15.709
both the YAML and JSON versions of both the
Kubernetes in OpenShift resources.

00:05:15.709 --> 00:05:16.970
So if we have a look at

00:05:16.970 --> 00:05:21.170
the service configuration in
the openshift.yaml file,

00:05:21.170 --> 00:05:24.650
we can see that it's being configured

00:05:24.650 --> 00:05:28.730
to forward anything coming
in on port 8080 to port

00:05:28.730 --> 00:05:31.760
8080 of whatever pod has

00:05:31.760 --> 00:05:36.770
this particular selector or matches
this particular selector.

00:05:36.770 --> 00:05:39.680
So it's app.kubernetes.io/

00:05:39.680 --> 00:05:43.054
name set to the artifact
ID of your application.

00:05:43.054 --> 00:05:46.085
And it's app.kubernetes.io/version

00:05:46.085 --> 00:05:50.100
set to the version of your pom.xml.

00:05:50.380 --> 00:05:53.360
If we have a look at the route as well,

00:05:53.360 --> 00:05:58.010
it basically simply configured
to send everything coming

00:05:58.010 --> 00:06:03.200
in to target port 8080 of
the service called expenses,

00:06:03.200 --> 00:06:07.430
which was generated in that
resource file as well.

00:06:07.430 --> 00:06:08.240
Right!

00:06:08.240 --> 00:06:11.960
So let's clean up by running
lab deploy-openshift

00:06:11.960 --> 00:06:17.580
finish and move on to the end of
chapter review lab in the next video.

