WEBVTT

00:00:00.000 --> 00:00:02.655
In this end of chapter review exercise,

00:00:02.655 --> 00:00:06.600
we're going to combine
the 2 previous ones,

00:00:06.600 --> 00:00:13.395
or the creation of a CDI bean and
the use of it in a client class,

00:00:13.395 --> 00:00:19.110
and the creation of a JPA
entity and the use of that one,

00:00:19.110 --> 00:00:21.215
using the Panache extension.

00:00:21.215 --> 00:00:25.085
Going to start by using lab
implement-review start script,

00:00:25.085 --> 00:00:30.870
which populates our lab exercise
directory with just a couple of files.

00:00:30.870 --> 00:00:32.940
So if we have a look at

00:00:32.940 --> 00:00:35.160
DO378/labs/implement-review,

00:00:35.160 --> 00:00:37.630
we can see there's a
prepared directory in it,

00:00:37.630 --> 00:00:40.370
which actually contains only 2 files.

00:00:40.370 --> 00:00:44.810
We're going to return to the Speaker.
java file a little bit later,

00:00:44.810 --> 00:00:49.520
whereas the other one is simply
an end of exercise grading tests,

00:00:49.520 --> 00:00:52.040
which is used to ensure that

00:00:52.040 --> 00:00:56.150
everything implemented in this
exercise works correctly.

00:00:56.150 --> 00:01:00.800
There is no project because we
are going to create it right now

00:01:00.800 --> 00:01:07.040
using the create goal of
the quarkus-maven-plugin.

00:01:07.040 --> 00:01:12.185
So we're going to invoke Maven with the
fully qualified name of the plugin,

00:01:12.185 --> 00:01:17.000
which is io.quarkus:quarkus-maven-plugin:

00:01:17.000 --> 00:01:18.350
the version is very important,

00:01:18.350 --> 00:01:22.115
1.11.7.Final-redhat

00:01:22.115 --> 00:01:30.470
-00009:create. We will
specify that our new project's group ID is,

00:01:30.470 --> 00:01:32.525
org.acme.

00:01:32.525 --> 00:01:36.260
The artifact is going to be
called microservice speaker,

00:01:36.260 --> 00:01:40.445
the platform group ID,
platform version.

00:01:40.445 --> 00:01:43.790
and so those 2 actually

00:01:43.790 --> 00:01:48.455
referred to the version of Quarkus
we want to populate in the project.

00:01:48.455 --> 00:01:51.890
And the class name we want
to create is going to

00:01:51.890 --> 00:01:55.295
be org.acme.conference.speaker.SpeakerResource.

00:01:55.295 --> 00:01:57.260
That is going to be an example

00:01:57.260 --> 00:02:01.490
REST microservice, just
have to specify that

00:02:01.490 --> 00:02:06.244
it's going to be accepting requests
at the /speaker endpoint.

00:02:06.244 --> 00:02:08.540
Running this Maven command,

00:02:08.540 --> 00:02:11.330
double-checking that
there are no typos first,

00:02:11.330 --> 00:02:14.030
but then running this
Maven command will give us

00:02:14.030 --> 00:02:17.900
a nice progress report
about applying the code

00:02:17.900 --> 00:02:23.420
starts, generating the
source files and report

00:02:23.420 --> 00:02:25.880
that a new project has been successfully

00:02:25.880 --> 00:02:30.335
generated in the microservice-speaker subdirectory.

00:02:30.335 --> 00:02:32.420
So we can just move on over

00:02:32.420 --> 00:02:36.334
there and have a look at
the source code generated.

00:02:36.334 --> 00:02:40.160
First of all, there is the speaker
resource rest web service,

00:02:40.160 --> 00:02:41.330
but it doesn't do anything.

00:02:41.330 --> 00:02:42.980
It just says hello out of the box.

00:02:42.980 --> 00:02:45.635
We're going to again return
to that one in a moment.

00:02:45.635 --> 00:02:49.865
There's an example, but empty
application.properties file.

00:02:49.865 --> 00:02:53.330
and there are some tests which
we do not need because they

00:02:53.330 --> 00:02:56.615
only test the hello method
which we're going to replace.

00:02:56.615 --> 00:02:58.490
We're going to throw it
out of the resource,

00:02:58.490 --> 00:03:02.000
so the first thing we can do is
just simply remove the tests.

00:03:02.000 --> 00:03:05.690
You can do it from your VSCodium
window as well, of course.

00:03:05.690 --> 00:03:11.945
And then use the Palette to add an
extension called resteasy-jsonb.

00:03:11.945 --> 00:03:17.165
That's because we want to serialize
and de-serialize JSON data.

00:03:17.165 --> 00:03:19.790
We are going to,

00:03:19.790 --> 00:03:22.910
so that's the first
extension having been added.

00:03:22.910 --> 00:03:26.630
We're also going to add JPA extensions,

00:03:26.630 --> 00:03:29.885
the Hibernate extension for Panache,

00:03:29.885 --> 00:03:33.450
and the jdbc-h2 driver.

00:03:34.000 --> 00:03:37.190
Note that I didn't use
the exact names here,

00:03:37.190 --> 00:03:43.084
but they were specific enough for
the command to be an ambiguous.

00:03:43.084 --> 00:03:46.790
So both extensions have
also been added to pom xml.

00:03:46.790 --> 00:03:48.950
You can do it manually in pom xml as well,

00:03:48.950 --> 00:03:52.550
or using VSCodium in the Palatte,

00:03:52.550 --> 00:03:55.490
the command palette quarkus add extension.

00:03:55.490 --> 00:03:59.630
Right? Let's fix application.properties first.

00:03:59.630 --> 00:04:06.785
We're going to add a couple of
datasource related properties.

00:04:06.785 --> 00:04:11.600
Note that, and I've deliberately
left this one in the old style,

00:04:11.600 --> 00:04:13.430
if you've worked with
Quarkuss previously,

00:04:13.430 --> 00:04:15.980
the old-style type of selecting

00:04:15.980 --> 00:04:19.835
the database is to specify
which driver to use.

00:04:19.835 --> 00:04:21.440
This is no longer present,

00:04:21.440 --> 00:04:23.570
as we're about to see a bit later,

00:04:23.570 --> 00:04:25.820
when we tried to start the application.

00:04:25.820 --> 00:04:28.610
But the jdbc.url, the username,

00:04:28.610 --> 00:04:33.545
and the ORM database
generation properties are fine.

00:04:33.545 --> 00:04:38.810
Now let's have a look at the
prepared speaker entity.

00:04:38.810 --> 00:04:40.790
It's actually not an entity yet,

00:04:40.790 --> 00:04:44.000
so copying it from the
prepared directory into

00:04:44.000 --> 00:04:47.555
/src/main/java/org/acme/conference/speaker,

00:04:47.555 --> 00:04:51.020
we can see that it does have
quite a bit of functionality.

00:04:51.020 --> 00:04:54.365
It's got the data fields,

00:04:54.365 --> 00:04:57.170
it's got a parameterless constructor.

00:04:57.170 --> 00:05:00.470
It's got 2 additional constructors,

00:05:00.470 --> 00:05:03.800
1 with the full set of
parameters and 1 which

00:05:03.800 --> 00:05:08.150
allows for a speaker with
no biography and no UID

00:05:08.150 --> 00:05:12.080
to be created because there
is a place holder for

00:05:12.080 --> 00:05:17.750
biography and there is a placeholder
for the generation of a randomUUID.

00:05:17.750 --> 00:05:22.020
And then it just has some
getters and setters. That's all.

00:05:22.720 --> 00:05:27.320
Additionally, it does
have a 2 string method.

00:05:27.320 --> 00:05:29.015
Right?

00:05:29.015 --> 00:05:31.115
We're going to fix this.

00:05:31.115 --> 00:05:34.205
We're going to add some JPA annotations,

00:05:34.205 --> 00:05:37.100
so comparing the original source code

00:05:37.100 --> 00:05:40.025
with the changes that I made, there it is,

00:05:40.025 --> 00:05:44.420
we made the otherwise bare class Speaker,

00:05:44.420 --> 00:05:48.065
an extension of the
PanacheEntity base class.

00:05:48.065 --> 00:05:52.550
We made sure that the
biography was not serialized.

00:05:52.550 --> 00:05:55.130
That is a requirement
from the exercise,

00:05:55.130 --> 00:06:00.695
so we add a JsonbTransient
annotation on the biography field.

00:06:00.695 --> 00:06:04.850
There is a couple of
whitespace differences here.

00:06:04.850 --> 00:06:06.260
These aren't really changes,

00:06:06.260 --> 00:06:11.990
so let's move on to the second
constructor, the short constructor,

00:06:11.990 --> 00:06:14.990
which actually allows us to create speaker

00:06:14.990 --> 00:06:18.950
without a biography and without
specifying randomUUID.

00:06:18.950 --> 00:06:20.300
This time around,

00:06:20.300 --> 00:06:23.270
since this constructor
does have an invocation of

00:06:23.270 --> 00:06:29.765
a parallel constructor with
all the missing parameters,

00:06:29.765 --> 00:06:32.870
we can actually annotate that one with

00:06:32.870 --> 00:06:38.315
JsonbCreator annotation and will
be used when de-serializing JSON.

00:06:38.315 --> 00:06:42.950
Provided that the JSON has
at least nameFirst, nameLast,

00:06:42.950 --> 00:06:48.560
organization, picture,
and twitterHandle parameters.

00:06:48.560 --> 00:06:50.375
If it doesn't have that,

00:06:50.375 --> 00:06:55.475
then the creation of deserialization
of that JSON will fail.

00:06:55.475 --> 00:06:56.630
Again,

00:06:56.630 --> 00:06:59.120
just a bunch of whitespace differences,

00:06:59.120 --> 00:07:02.195
no real change in
the functionality here,

00:07:02.195 --> 00:07:08.660
all the way until the end where we
implement 3 additional methods.

00:07:08.660 --> 00:07:13.430
First one is an optional
findByUuid method,

00:07:13.430 --> 00:07:19.520
which allows us to search for
speakers if they exist by uuid.

00:07:19.520 --> 00:07:22.955
So it does not fail if the
speaker does not exist,

00:07:22.955 --> 00:07:29.375
but it does return the first
result because uuid is unique,

00:07:29.375 --> 00:07:30.710
it is a key of sorts.

00:07:30.710 --> 00:07:33.650
So there's always going to
be only one result for that.

00:07:33.650 --> 00:07:37.400
It does return the first result of the list of speakers

00:07:37.400 --> 00:07:40.640
that are to use by the
find by uuid methods.

00:07:40.640 --> 00:07:42.335
So if there is no result,

00:07:42.335 --> 00:07:46.265
then the optional just returns nothing.

00:07:46.265 --> 00:07:49.909
The second method is to deleteByUuid.

00:07:49.909 --> 00:07:54.380
It simply forwards delegates,

00:07:54.380 --> 00:07:57.830
this invocation to the Panache
entities delete method

00:07:57.830 --> 00:08:00.725
and finally, there's a search by query.

00:08:00.725 --> 00:08:03.905
The query is for firstName
or for lastName,

00:08:03.905 --> 00:08:06.305
as it says in the exercise text,

00:08:06.305 --> 00:08:12.515
we will be using this JPA
query with the list method,

00:08:12.515 --> 00:08:16.040
built-in list method in
the PanacheEntity class.

00:08:16.040 --> 00:08:21.275
The upper invocations
make it a

00:08:21.275 --> 00:08:23.915
case insensitive search.

00:08:23.915 --> 00:08:26.675
So it's going to be either first name

00:08:26.675 --> 00:08:29.225
like the query, last name

00:08:29.225 --> 00:08:35.075
like the query, and the query
itself converted to uppercase.

00:08:35.075 --> 00:08:38.645
Now the only thing here
in the first line is that

00:08:38.645 --> 00:08:46.020
if the String parameter to this
method is uninitialized or null,

00:08:46.030 --> 00:08:52.610
then we initialize it with a
default value which is UNKNOWN.

00:08:52.610 --> 00:08:58.385
So whatever you specify to the search
as the parameter will be uppercased.

00:08:58.385 --> 00:09:01.085
If you do not specify anything,

00:09:01.085 --> 00:09:06.530
then UNKNOWN will be used as the
search term in this list method.

00:09:06.530 --> 00:09:09.350
All right, we have done
with the Speaker class.

00:09:09.350 --> 00:09:13.250
Now let's create a new
SpeakerService.java class.

00:09:13.250 --> 00:09:15.590
Note that this is not really necessary,

00:09:15.590 --> 00:09:18.260
but we are going to use it to

00:09:18.260 --> 00:09:22.175
take advantage of dependency
injection in the next step.

00:09:22.175 --> 00:09:25.115
As far as anything else is concerned,

00:09:25.115 --> 00:09:30.755
all the methods in the SpeakerService.java
just delegations to the entity,

00:09:30.755 --> 00:09:35.885
as you can see. This is an @ApplicationScoped
speaker service class,

00:09:35.885 --> 00:09:38.115
which makes it a CDI bean.

00:09:38.115 --> 00:09:40.720
As far as the methods
are concerned, really,

00:09:40.720 --> 00:09:44.485
we just delegate all of the
methods to the Speaker entity,

00:09:44.485 --> 00:09:47.980
verbatim as they are.

00:09:47.980 --> 00:09:51.010
So no heavy logic here.

00:09:51.010 --> 00:09:55.540
As I said, we only created this
class to demonstrate injection.

00:09:55.540 --> 00:09:56.965
Right?

00:09:56.965 --> 00:09:59.485
So that is what we're going to do next.

00:09:59.485 --> 00:10:01.990
We're going to modify
the SpeakerResource,

00:10:01.990 --> 00:10:05.200
we are going to remove the hello method,

00:10:05.200 --> 00:10:09.880
we are going to make it
RESTful Web Service.

00:10:09.880 --> 00:10:15.355
The path annotation was already
added by the initialization process

00:10:15.355 --> 00:10:21.200
but we have to make sure that it
both @Consumes and @Produces JSON.

00:10:21.420 --> 00:10:25.390
We will be injecting the SpeakerService,

00:10:25.390 --> 00:10:28.660
so will be a CDI client.

00:10:28.660 --> 00:10:33.130
As I said, remove the hello
method and replace it

00:10:33.130 --> 00:10:38.575
with the listAll method
answering to the GET request.

00:10:38.575 --> 00:10:42.085
If there is a GET request
at the search endpoint,

00:10:42.085 --> 00:10:47.200
we will take the query
parameter called q and

00:10:47.200 --> 00:10:52.645
return the results of the query of the
search method in the service method.

00:10:52.645 --> 00:10:55.165
Remember, this is the
service method we injected,

00:10:55.165 --> 00:10:59.995
simply delegating it
to the speaker entity.

00:10:59.995 --> 00:11:06.590
The GET at the Path of uuid
is basically a delegation to

00:11:06.590 --> 00:11:13.730
findByUuid or thrown of a
NotFoundException.

00:11:13.730 --> 00:11:16.175
There's another POST method,

00:11:16.175 --> 00:11:21.440
which takes the post method body and
creates a newSpeaker by invoking

00:11:21.440 --> 00:11:26.915
the service.create method and returns the
fully qualified newSpeaker resource.

00:11:26.915 --> 00:11:30.110
And finally the DELETE method,

00:11:30.110 --> 00:11:33.770
which deletes a speaker by UUID,

00:11:33.770 --> 00:11:37.025
which is expected to be
in the path as well,

00:11:37.025 --> 00:11:41.600
right. So let's try
executing our application

00:11:41.600 --> 00:11:44.720
As I said, I deliberately
left the old style

00:11:44.720 --> 00:11:47.795
of setting the datasource parameters in.

00:11:47.795 --> 00:11:51.845
As you can see, Quarkus
immediately complains,

00:11:51.845 --> 00:11:55.940
it says that quarkus.datasource.url and quarkus.datasource.

00:11:55.940 --> 00:11:58.220
driver had been deprecated in Quarkus

00:11:58.220 --> 00:12:00.920
1.3 and removed in
1.9.

00:12:00.920 --> 00:12:08.000
So we should be using the new
instead of datasource.driver.

00:12:08.000 --> 00:12:13.835
We should be using the new form that datasource.db-kind pointing to h2.

00:12:13.835 --> 00:12:17.660
Our URL is saved because it's
not quarkus.datasource.url

00:12:17.660 --> 00:12:21.305
but rather a quarkus.datasource.jdbc.url.

00:12:21.305 --> 00:12:25.865
So this is the correct way of specifying connection properties.

00:12:25.865 --> 00:12:27.335
Now when we are trying again,

00:12:27.335 --> 00:12:29.990
quarkus:dev starts up

00:12:29.990 --> 00:12:36.650
and we can simply send an example
request to the application.

00:12:36.650 --> 00:12:42.500
We don't get any responses because we
didn't write any auto loading code,

00:12:42.500 --> 00:12:45.575
we do not have an import SQL
file or any of the sort.

00:12:45.575 --> 00:12:47.750
But it is a proof of concept,

00:12:47.750 --> 00:12:49.430
the application is responding.

00:12:49.430 --> 00:12:53.809
The rest of the functionality
will be tested after we stop

00:12:53.809 --> 00:12:59.000
the Quarkus runtime and invoke lab
implement-review grade script,

00:12:59.000 --> 00:13:02.840
which will actually perform the tests for

00:13:02.840 --> 00:13:07.460
the endpoints that we're supposed
to be designed. After it passes,

00:13:07.460 --> 00:13:11.375
and of course, after you get an
overall exercise, passing grade,

00:13:11.375 --> 00:13:14.345
simply invoke the lab implement-
review finish script,

00:13:14.345 --> 00:13:17.420
which will clean everything
up. After you are done

00:13:17.420 --> 00:13:20.030
so, join us in the next video,

00:13:20.030 --> 00:13:25.890
where we will talk about deploying microservice
based applications. See you there.

