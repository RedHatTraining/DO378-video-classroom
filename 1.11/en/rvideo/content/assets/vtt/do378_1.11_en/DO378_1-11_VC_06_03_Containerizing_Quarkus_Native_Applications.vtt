WEBVTT

00:00:00.000 --> 00:00:04.050
Now that we've built a native binary
for our Quarkus application,

00:00:04.050 --> 00:00:06.720
let's have a look at how
to containerize that.

00:00:06.720 --> 00:00:10.110
We did a build that took
place in a container,

00:00:10.110 --> 00:00:13.110
but the artifact was still
produced in our target directory,

00:00:13.110 --> 00:00:14.400
so it was outside.

00:00:14.400 --> 00:00:16.920
Now, the best way to take advantage of

00:00:16.920 --> 00:00:20.040
this native building capacity is

00:00:20.040 --> 00:00:23.160
to actually containerize
the binary itself as well.

00:00:23.160 --> 00:00:27.780
It's very efficient because the only
binary you will be executing on top of

00:00:27.780 --> 00:00:33.750
a minimal execution environment is
going to be the binary we have produced,

00:00:33.750 --> 00:00:37.380
which saves a lot of space
that would otherwise be

00:00:37.380 --> 00:00:41.630
occupied by the JVM and the unused
extra libraries and so on,

00:00:41.630 --> 00:00:44.180
which makes the container
image even smaller

00:00:44.180 --> 00:00:47.825
and quicker to download and
of course quicker to scale.

00:00:47.825 --> 00:00:49.550
Just like we have talked in

00:00:49.550 --> 00:00:54.770
the previous chapter of container
in Java applications in Quarkus,

00:00:54.770 --> 00:00:57.290
native applications in Quarkus can use

00:00:57.290 --> 00:01:00.530
the 3 most commonly used
containerization plugins.

00:01:00.530 --> 00:01:05.960
So either Docker, where you add the
extension container-image-docker to

00:01:05.960 --> 00:01:11.600
your Quarkus project or add the
dependency manually to your pom.xml.

00:01:11.600 --> 00:01:13.430
Of course, that does require the Docker

00:01:13.430 --> 00:01:16.100
Daemon to be running on your workstation,

00:01:16.100 --> 00:01:17.750
or at least to have

00:01:17.750 --> 00:01:22.385
a Docker Client binary that can
connect to a Docker Daemon somewhere.

00:01:22.385 --> 00:01:25.190
The Jib extension is

00:01:25.190 --> 00:01:30.125
a pure Java extension that does
not depend on any container runtime.

00:01:30.125 --> 00:01:34.970
And you can actually use it

00:01:34.970 --> 00:01:39.620
with Quarkus by adding container-
image-jib extension to your project,

00:01:39.620 --> 00:01:43.505
or adding the corresponding
dependency manually.

00:01:43.505 --> 00:01:45.740
The benefit of jib is of course,

00:01:45.740 --> 00:01:48.710
that it is a pure Java implementation.

00:01:48.710 --> 00:01:51.920
It is in itself a Maven plugin as well,

00:01:51.920 --> 00:01:56.495
so you can use it outside of Quarkus
for your containerization needs too.

00:01:56.495 --> 00:02:03.410
And with jib, the container
image usually needs to be

00:02:03.410 --> 00:02:05.750
pushed somewhere after
the build because there is

00:02:05.750 --> 00:02:09.830
no container engine to actually
hold it once it's done.

00:02:09.830 --> 00:02:13.700
The third option is to use the Source2Image containerization plugin,

00:02:13.700 --> 00:02:18.845
which actually copies
the existing artifacts

00:02:18.845 --> 00:02:21.350
into a builder image in OpenShift,

00:02:21.350 --> 00:02:25.355
which then creates an application
image in a Source2Image build,

00:02:25.355 --> 00:02:28.790
which in turn depends on

00:02:28.790 --> 00:02:33.785
the BuildConfig resource created
in the OpenShift cluster,

00:02:33.785 --> 00:02:36.710
with the strategy of source.

00:02:36.710 --> 00:02:41.450
And of course, an ImageStream that the
resulting image will be stored into.

00:02:41.450 --> 00:02:44.630
These 2 are OpenShift
extensions to the Kubernetes API.

00:02:44.630 --> 00:02:48.590
So if you use the Quarkus
OpenShift extension,

00:02:48.590 --> 00:02:51.425
they will be automatically
generated during build.

00:02:51.425 --> 00:02:55.490
You can add the S2I containerization extension

00:02:55.490 --> 00:02:57.710
to the project using quarkus:add-

00:02:57.710 --> 00:03:00.590
extension pointing to
container-image-s2i

00:03:00.590 --> 00:03:04.595
or adding the extension
manually to your pom.xml.

00:03:04.595 --> 00:03:07.895
Once that is done, the process of building

00:03:07.895 --> 00:03:10.940
a container image using your
natively compiled application is

00:03:10.940 --> 00:03:17.375
no different than creating a Java
application in a container image

00:03:17.375 --> 00:03:22.625
except that you will be selecting the
native profile with maven package.

00:03:22.625 --> 00:03:25.400
And of course, as usually,

00:03:25.400 --> 00:03:30.275
you would set the container-image.
build quarkus property to true.

00:03:30.275 --> 00:03:33.890
If you are using
jib or if you want to

00:03:33.890 --> 00:03:37.490
store the image somewhere in
a registry after the build,

00:03:37.490 --> 00:03:39.200
then you would also specify

00:03:39.200 --> 00:03:43.145
Dquarckus.container-image.push
property, set it to true.

00:03:43.145 --> 00:03:47.030
And ultimately, if you are using

00:03:47.030 --> 00:03:54.225
a specific container runtime and
you don't want to use Docker,

00:03:54.225 --> 00:03:59.605
then you can still specify Dquarkus.native.container-runtime equals podman

00:03:59.605 --> 00:04:03.245
In previous chapters we have
discussed how to deploy

00:04:03.245 --> 00:04:05.150
Quarkus Java applications to

00:04:05.150 --> 00:04:09.710
OpenShift Container Platform using the
quarkus.kubernetes.deploy property.

00:04:09.710 --> 00:04:13.355
The process is no different if we want to

00:04:13.355 --> 00:04:18.230
deploy to OpenShift in a native mode.

00:04:18.230 --> 00:04:21.560
So we simply switch to native profile

00:04:21.560 --> 00:04:25.890
when doing the -Dquarkus.kubernetes.deploy
equals true build.

00:04:25.960 --> 00:04:29.585
This is a binary build still though,

00:04:29.585 --> 00:04:32.900
so the binary is built on

00:04:32.900 --> 00:04:35.180
your workstation and then added

00:04:35.180 --> 00:04:37.760
to an image inside the
OpenShift Container Platform.

00:04:37.760 --> 00:04:40.775
So you have to take
care of certain things,

00:04:40.775 --> 00:04:43.190
such as the architecture
of your workstation,

00:04:43.190 --> 00:04:45.740
the architecture of the resulting binary,

00:04:45.740 --> 00:04:47.810
and of course then
consequently the architecture

00:04:47.810 --> 00:04:50.660
of the nodes that you want
to run the binary on.

00:04:50.660 --> 00:04:56.030
Alternatively, you could go for source

00:04:56.030 --> 00:04:58.850
container image deployment, it's basically

00:04:58.850 --> 00:05:02.780
a Source-to-Image build
using the native profile.

00:05:02.780 --> 00:05:06.245
Simply using oc new-app,

00:05:06.245 --> 00:05:09.350
pointing to your source
code and specifying that

00:05:09.350 --> 00:05:13.280
the image that is supposed to
be used for a build is going

00:05:13.280 --> 00:05:19.190
to be /ubi-quarkus-native-s2i. That one contains all the Source-

00:05:19.190 --> 00:05:21.380
to-Image scripts that
are needed to produce

00:05:21.380 --> 00:05:25.385
a native binary from your
Quarkus source code.

00:05:25.385 --> 00:05:27.530
Beware though that this is

00:05:27.530 --> 00:05:32.060
a CPU intensive operation, it
is extremely CPU intensive.

00:05:32.060 --> 00:05:35.480
So don't perform that unless

00:05:35.480 --> 00:05:39.605
your OpenShift cluster has
specific nodes dedicated to build.

00:05:39.605 --> 00:05:42.110
Or of course, you are
sure that you won't be

00:05:42.110 --> 00:05:46.865
disturbing any production
applications doing it.

00:05:46.865 --> 00:05:49.610
Let's go to the next video and
have a look at containerizing

00:05:49.610 --> 00:05:53.460
native Quarkus applications
in practice. See you there.

